{"ast":null,"code":"import { getCurrentInstance, computed, watch } from 'vue';\nconst CHECKED_CHANGE_EVENT = \"checked-change\";\nconst useCheckProps = {\n  data: {\n    type: Array,\n\n    default() {\n      return [];\n    }\n\n  },\n  optionRender: Function,\n  placeholder: String,\n  title: String,\n  filterable: Boolean,\n  format: Object,\n  filterMethod: Function,\n  defaultChecked: Array,\n  props: Object\n};\n\nconst useCheck = (props, panelState) => {\n  const {\n    emit\n  } = getCurrentInstance();\n  const labelProp = computed(() => props.props.label || \"label\");\n  const keyProp = computed(() => props.props.key || \"key\");\n  const disabledProp = computed(() => props.props.disabled || \"disabled\");\n  const filteredData = computed(() => {\n    return props.data.filter(item => {\n      if (typeof props.filterMethod === \"function\") {\n        return props.filterMethod(panelState.query, item);\n      } else {\n        const label = item[labelProp.value] || item[keyProp.value].toString();\n        return label.toLowerCase().includes(panelState.query.toLowerCase());\n      }\n    });\n  });\n  const checkableData = computed(() => {\n    return filteredData.value.filter(item => !item[disabledProp.value]);\n  });\n  const checkedSummary = computed(() => {\n    const checkedLength = panelState.checked.length;\n    const dataLength = props.data.length;\n    const {\n      noChecked,\n      hasChecked\n    } = props.format;\n\n    if (noChecked && hasChecked) {\n      return checkedLength > 0 ? hasChecked.replace(/\\${checked}/g, checkedLength.toString()).replace(/\\${total}/g, dataLength.toString()) : noChecked.replace(/\\${total}/g, dataLength.toString());\n    } else {\n      return `${checkedLength}/${dataLength}`;\n    }\n  });\n  const isIndeterminate = computed(() => {\n    const checkedLength = panelState.checked.length;\n    return checkedLength > 0 && checkedLength < checkableData.value.length;\n  });\n\n  const updateAllChecked = () => {\n    const checkableDataKeys = checkableData.value.map(item => item[keyProp.value]);\n    panelState.allChecked = checkableDataKeys.length > 0 && checkableDataKeys.every(item => panelState.checked.includes(item));\n  };\n\n  const handleAllCheckedChange = value => {\n    panelState.checked = value ? checkableData.value.map(item => item[keyProp.value]) : [];\n  };\n\n  watch(() => panelState.checked, (val, oldVal) => {\n    updateAllChecked();\n\n    if (panelState.checkChangeByUser) {\n      const movedKeys = val.concat(oldVal).filter(v => !val.includes(v) || !oldVal.includes(v));\n      emit(CHECKED_CHANGE_EVENT, val, movedKeys);\n    } else {\n      emit(CHECKED_CHANGE_EVENT, val);\n      panelState.checkChangeByUser = true;\n    }\n  });\n  watch(checkableData, () => {\n    updateAllChecked();\n  });\n  watch(() => props.data, () => {\n    const checked = [];\n    const filteredDataKeys = filteredData.value.map(item => item[keyProp.value]);\n    panelState.checked.forEach(item => {\n      if (filteredDataKeys.includes(item)) {\n        checked.push(item);\n      }\n    });\n    panelState.checkChangeByUser = false;\n    panelState.checked = checked;\n  });\n  watch(() => props.defaultChecked, (val, oldVal) => {\n    if (oldVal && val.length === oldVal.length && val.every(item => oldVal.includes(item))) return;\n    const checked = [];\n    const checkableDataKeys = checkableData.value.map(item => item[keyProp.value]);\n    val.forEach(item => {\n      if (checkableDataKeys.includes(item)) {\n        checked.push(item);\n      }\n    });\n    panelState.checkChangeByUser = false;\n    panelState.checked = checked;\n  }, {\n    immediate: true\n  });\n  return {\n    labelProp,\n    keyProp,\n    disabledProp,\n    filteredData,\n    checkableData,\n    checkedSummary,\n    isIndeterminate,\n    updateAllChecked,\n    handleAllCheckedChange\n  };\n};\n\nexport { CHECKED_CHANGE_EVENT, useCheck, useCheckProps };","map":null,"metadata":{},"sourceType":"module"}