{"ast":null,"code":"import { Fragment, defineComponent, getCurrentInstance, ref, onUpdated, onMounted, watch, nextTick, provide, h, renderSlot } from 'vue';\nimport { isPromise, NOOP } from '@vue/shared';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { Plus } from '@element-plus/icons-vue';\nimport '../../../tokens/index.mjs';\nimport TabNav from './tab-nav.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props.mjs';\nimport { UPDATE_MODEL_EVENT, INPUT_EVENT } from '../../../constants/event.mjs';\nimport { tabsRootContextKey } from '../../../tokens/tabs.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nconst tabsProps = buildProps({\n  type: {\n    type: String,\n    values: [\"card\", \"border-card\", \"\"],\n    default: \"\"\n  },\n  activeName: {\n    type: String,\n    default: \"\"\n  },\n  closable: Boolean,\n  addable: Boolean,\n  modelValue: {\n    type: [String, Number],\n    default: \"\"\n  },\n  editable: Boolean,\n  tabPosition: {\n    type: String,\n    values: [\"top\", \"right\", \"bottom\", \"left\"],\n    default: \"top\"\n  },\n  beforeLeave: {\n    type: definePropType(Function),\n    default: () => true\n  },\n  stretch: Boolean\n});\nconst tabsEmits = {\n  [UPDATE_MODEL_EVENT]: tabName => typeof tabName === \"string\" || typeof tabName === \"number\",\n  [INPUT_EVENT]: tabName => typeof tabName === \"string\" || typeof tabName === \"number\",\n  \"tab-click\": (pane, ev) => ev instanceof Event,\n  edit: (paneName, action) => action === \"remove\" || action === \"add\",\n  \"tab-remove\": paneName => typeof paneName === \"string\" || typeof paneName === \"number\",\n  \"tab-add\": () => true\n};\n\nconst getPaneInstanceFromSlot = (vnode, paneInstanceList = []) => {\n  const children = vnode.children || [];\n  Array.from(children).forEach(node => {\n    let type = node.type;\n    type = type.name || type;\n\n    if (type === \"ElTabPane\" && node.component) {\n      paneInstanceList.push(node.component);\n    } else if (type === Fragment || type === \"template\") {\n      getPaneInstanceFromSlot(node, paneInstanceList);\n    }\n  });\n  return paneInstanceList;\n};\n\nvar Tabs = defineComponent({\n  name: \"ElTabs\",\n  props: tabsProps,\n  emits: tabsEmits,\n\n  setup(props, {\n    emit,\n    slots,\n    expose\n  }) {\n    const instance = getCurrentInstance();\n    const nav$ = ref();\n    const panes = ref([]);\n    const currentName = ref(props.modelValue || props.activeName || \"0\");\n    const paneStatesMap = {};\n\n    const updatePaneInstances = (isForceUpdate = false) => {\n      if (slots.default) {\n        const children = instance.subTree.children;\n        const content = Array.from(children).find(({\n          props: props2\n        }) => (props2 == null ? void 0 : props2.class) === \"el-tabs__content\");\n        if (!content) return;\n        const paneInstanceList = getPaneInstanceFromSlot(content).map(paneComponent => paneStatesMap[paneComponent.uid]);\n        const panesChanged = !(paneInstanceList.length === panes.value.length && paneInstanceList.every((pane, index) => pane.uid === panes.value[index].uid));\n\n        if (isForceUpdate || panesChanged) {\n          panes.value = paneInstanceList;\n        }\n      } else if (panes.value.length !== 0) {\n        panes.value = [];\n      }\n    };\n\n    const changeCurrentName = value => {\n      currentName.value = value;\n      emit(INPUT_EVENT, value);\n      emit(UPDATE_MODEL_EVENT, value);\n    };\n\n    const setCurrentName = value => {\n      var _a;\n\n      if (currentName.value === value) return;\n      const canLeave = (_a = props.beforeLeave) == null ? void 0 : _a.call(props, value, currentName.value);\n\n      if (isPromise(canLeave)) {\n        canLeave.then(() => {\n          var _a2, _b;\n\n          changeCurrentName(value);\n          (_b = (_a2 = nav$.value) == null ? void 0 : _a2.removeFocus) == null ? void 0 : _b.call(_a2);\n        }, NOOP);\n      } else if (canLeave !== false) {\n        changeCurrentName(value);\n      }\n    };\n\n    const handleTabClick = (tab, tabName, event) => {\n      if (tab.props.disabled) return;\n      setCurrentName(tabName);\n      emit(\"tab-click\", tab, event);\n    };\n\n    const handleTabRemove = (pane, ev) => {\n      if (pane.props.disabled) return;\n      ev.stopPropagation();\n      emit(\"edit\", pane.props.name, \"remove\");\n      emit(\"tab-remove\", pane.props.name);\n    };\n\n    const handleTabAdd = () => {\n      emit(\"edit\", null, \"add\");\n      emit(\"tab-add\");\n    };\n\n    onUpdated(() => updatePaneInstances());\n    onMounted(() => updatePaneInstances());\n    watch(() => props.activeName, modelValue => setCurrentName(modelValue));\n    watch(() => props.modelValue, modelValue => setCurrentName(modelValue));\n    watch(currentName, async () => {\n      var _a, _b;\n\n      updatePaneInstances(true);\n      await nextTick();\n      await ((_a = nav$.value) == null ? void 0 : _a.$nextTick());\n      (_b = nav$.value) == null ? void 0 : _b.scrollToActiveTab();\n    });\n    provide(tabsRootContextKey, {\n      props,\n      currentName,\n      updatePaneState: pane => paneStatesMap[pane.uid] = pane\n    });\n    expose({\n      currentName\n    });\n    return () => {\n      const newButton = props.editable || props.addable ? h(\"span\", {\n        class: \"el-tabs__new-tab\",\n        tabindex: \"0\",\n        onClick: handleTabAdd,\n        onKeydown: ev => {\n          if (ev.code === EVENT_CODE.enter) handleTabAdd();\n        }\n      }, [h(ElIcon, {\n        class: \"is-icon-plus\"\n      }, {\n        default: () => h(Plus)\n      })]) : null;\n      const header = h(\"div\", {\n        class: [\"el-tabs__header\", `is-${props.tabPosition}`]\n      }, [newButton, h(TabNav, {\n        currentName: currentName.value,\n        editable: props.editable,\n        type: props.type,\n        panes: panes.value,\n        stretch: props.stretch,\n        ref: nav$,\n        onTabClick: handleTabClick,\n        onTabRemove: handleTabRemove\n      })]);\n      const panels = h(\"div\", {\n        class: \"el-tabs__content\"\n      }, [renderSlot(slots, \"default\")]);\n      return h(\"div\", {\n        class: {\n          \"el-tabs\": true,\n          \"el-tabs--card\": props.type === \"card\",\n          [`el-tabs--${props.tabPosition}`]: true,\n          \"el-tabs--border-card\": props.type === \"border-card\"\n        }\n      }, props.tabPosition !== \"bottom\" ? [header, panels] : [panels, header]);\n    };\n  }\n\n});\nexport { Tabs as default, tabsEmits, tabsProps };","map":null,"metadata":{},"sourceType":"module"}