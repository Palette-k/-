{"ast":null,"code":"import { markRaw, defineComponent, ref, effectScope, computed, watch, nextTick, onMounted, resolveComponent, openBlock, createBlock, Teleport, createVNode, Transition, withCtx, createElementVNode, normalizeClass, normalizeStyle, withModifiers, createCommentVNode, createElementBlock, Fragment, resolveDynamicComponent, renderList, withDirectives, vShow, renderSlot } from 'vue';\nimport { isNumber, useEventListener } from '@vueuse/core';\nimport { throttle } from 'lodash-unified';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport { FullScreen, ScaleToOriginal, Close, ArrowLeft, ArrowRight, ZoomOut, ZoomIn, RefreshLeft, RefreshRight } from '@element-plus/icons-vue';\nimport { imageViewerProps, imageViewerEmits } from './image-viewer.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { isFirefox } from '../../../utils/browser.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useZIndex } from '../../../hooks/use-z-index/index.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nconst Mode = {\n  CONTAIN: {\n    name: \"contain\",\n    icon: markRaw(FullScreen)\n  },\n  ORIGINAL: {\n    name: \"original\",\n    icon: markRaw(ScaleToOriginal)\n  }\n};\nconst mousewheelEventName = isFirefox() ? \"DOMMouseScroll\" : \"mousewheel\";\n\nconst _sfc_main = defineComponent({\n  name: \"ElImageViewer\",\n  components: {\n    ElIcon,\n    Close,\n    ArrowLeft,\n    ArrowRight,\n    ZoomOut,\n    ZoomIn,\n    RefreshLeft,\n    RefreshRight\n  },\n  props: imageViewerProps,\n  emits: imageViewerEmits,\n\n  setup(props, {\n    emit\n  }) {\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"image-viewer\");\n    const {\n      nextZIndex\n    } = useZIndex();\n    const wrapper = ref();\n    const imgRefs = ref([]);\n    const scopeEventListener = effectScope();\n    const loading = ref(true);\n    const index = ref(props.initialIndex);\n    const mode = ref(Mode.CONTAIN);\n    const transform = ref({\n      scale: 1,\n      deg: 0,\n      offsetX: 0,\n      offsetY: 0,\n      enableTransition: false\n    });\n    const isSingle = computed(() => {\n      const {\n        urlList\n      } = props;\n      return urlList.length <= 1;\n    });\n    const isFirst = computed(() => {\n      return index.value === 0;\n    });\n    const isLast = computed(() => {\n      return index.value === props.urlList.length - 1;\n    });\n    const currentImg = computed(() => {\n      return props.urlList[index.value];\n    });\n    const imgStyle = computed(() => {\n      const {\n        scale,\n        deg,\n        offsetX,\n        offsetY,\n        enableTransition\n      } = transform.value;\n      let translateX = offsetX / scale;\n      let translateY = offsetY / scale;\n\n      switch (deg % 360) {\n        case 90:\n        case -270:\n          ;\n          [translateX, translateY] = [translateY, -translateX];\n          break;\n\n        case 180:\n        case -180:\n          ;\n          [translateX, translateY] = [-translateX, -translateY];\n          break;\n\n        case 270:\n        case -90:\n          ;\n          [translateX, translateY] = [-translateY, translateX];\n          break;\n      }\n\n      const style = {\n        transform: `scale(${scale}) rotate(${deg}deg) translate(${translateX}px, ${translateY}px)`,\n        transition: enableTransition ? \"transform .3s\" : \"\"\n      };\n\n      if (mode.value.name === Mode.CONTAIN.name) {\n        style.maxWidth = style.maxHeight = \"100%\";\n      }\n\n      return style;\n    });\n    const computedZIndex = computed(() => {\n      return isNumber(props.zIndex) ? props.zIndex : nextZIndex();\n    });\n\n    function hide() {\n      unregisterEventListener();\n      emit(\"close\");\n    }\n\n    function registerEventListener() {\n      const keydownHandler = throttle(e => {\n        switch (e.code) {\n          case EVENT_CODE.esc:\n            hide();\n            break;\n\n          case EVENT_CODE.space:\n            toggleMode();\n            break;\n\n          case EVENT_CODE.left:\n            prev();\n            break;\n\n          case EVENT_CODE.up:\n            handleActions(\"zoomIn\");\n            break;\n\n          case EVENT_CODE.right:\n            next();\n            break;\n\n          case EVENT_CODE.down:\n            handleActions(\"zoomOut\");\n            break;\n        }\n      });\n      const mousewheelHandler = throttle(e => {\n        const delta = e.wheelDelta ? e.wheelDelta : -e.detail;\n\n        if (delta > 0) {\n          handleActions(\"zoomIn\", {\n            zoomRate: 1.2,\n            enableTransition: false\n          });\n        } else {\n          handleActions(\"zoomOut\", {\n            zoomRate: 1.2,\n            enableTransition: false\n          });\n        }\n      });\n      scopeEventListener.run(() => {\n        useEventListener(document, \"keydown\", keydownHandler);\n        useEventListener(document, mousewheelEventName, mousewheelHandler);\n      });\n    }\n\n    function unregisterEventListener() {\n      scopeEventListener.stop();\n    }\n\n    function handleImgLoad() {\n      loading.value = false;\n    }\n\n    function handleImgError(e) {\n      loading.value = false;\n      e.target.alt = t(\"el.image.error\");\n    }\n\n    function handleMouseDown(e) {\n      if (loading.value || e.button !== 0 || !wrapper.value) return;\n      transform.value.enableTransition = false;\n      const {\n        offsetX,\n        offsetY\n      } = transform.value;\n      const startX = e.pageX;\n      const startY = e.pageY;\n      const dragHandler = throttle(ev => {\n        transform.value = { ...transform.value,\n          offsetX: offsetX + ev.pageX - startX,\n          offsetY: offsetY + ev.pageY - startY\n        };\n      });\n      const removeMousemove = useEventListener(document, \"mousemove\", dragHandler);\n      useEventListener(document, \"mouseup\", () => {\n        removeMousemove();\n      });\n      e.preventDefault();\n    }\n\n    function reset() {\n      transform.value = {\n        scale: 1,\n        deg: 0,\n        offsetX: 0,\n        offsetY: 0,\n        enableTransition: false\n      };\n    }\n\n    function toggleMode() {\n      if (loading.value) return;\n      const modeNames = Object.keys(Mode);\n      const modeValues = Object.values(Mode);\n      const currentMode = mode.value.name;\n      const index2 = modeValues.findIndex(i => i.name === currentMode);\n      const nextIndex = (index2 + 1) % modeNames.length;\n      mode.value = Mode[modeNames[nextIndex]];\n      reset();\n    }\n\n    function prev() {\n      if (isFirst.value && !props.infinite) return;\n      const len = props.urlList.length;\n      index.value = (index.value - 1 + len) % len;\n    }\n\n    function next() {\n      if (isLast.value && !props.infinite) return;\n      const len = props.urlList.length;\n      index.value = (index.value + 1) % len;\n    }\n\n    function handleActions(action, options = {}) {\n      if (loading.value) return;\n      const {\n        zoomRate,\n        rotateDeg,\n        enableTransition\n      } = {\n        zoomRate: 1.4,\n        rotateDeg: 90,\n        enableTransition: true,\n        ...options\n      };\n\n      switch (action) {\n        case \"zoomOut\":\n          if (transform.value.scale > 0.2) {\n            transform.value.scale = parseFloat((transform.value.scale / zoomRate).toFixed(3));\n          }\n\n          break;\n\n        case \"zoomIn\":\n          if (transform.value.scale < 7) {\n            transform.value.scale = parseFloat((transform.value.scale * zoomRate).toFixed(3));\n          }\n\n          break;\n\n        case \"clockwise\":\n          transform.value.deg += rotateDeg;\n          break;\n\n        case \"anticlockwise\":\n          transform.value.deg -= rotateDeg;\n          break;\n      }\n\n      transform.value.enableTransition = enableTransition;\n    }\n\n    watch(currentImg, () => {\n      nextTick(() => {\n        const $img = imgRefs.value[0];\n\n        if (!($img == null ? void 0 : $img.complete)) {\n          loading.value = true;\n        }\n      });\n    });\n    watch(index, val => {\n      reset();\n      emit(\"switch\", val);\n    });\n    onMounted(() => {\n      var _a, _b;\n\n      registerEventListener();\n      (_b = (_a = wrapper.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    });\n    return {\n      index,\n      wrapper,\n      imgRefs,\n      isSingle,\n      isFirst,\n      isLast,\n      currentImg,\n      imgStyle,\n      mode,\n      computedZIndex,\n      handleActions,\n      prev,\n      next,\n      hide,\n      toggleMode,\n      handleImgLoad,\n      handleImgError,\n      handleMouseDown,\n      ns\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"src\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_close = resolveComponent(\"close\");\n\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_arrow_left = resolveComponent(\"arrow-left\");\n\n  const _component_arrow_right = resolveComponent(\"arrow-right\");\n\n  const _component_zoom_out = resolveComponent(\"zoom-out\");\n\n  const _component_zoom_in = resolveComponent(\"zoom-in\");\n\n  const _component_refresh_left = resolveComponent(\"refresh-left\");\n\n  const _component_refresh_right = resolveComponent(\"refresh-right\");\n\n  return openBlock(), createBlock(Teleport, {\n    to: \"body\",\n    disabled: !_ctx.teleported\n  }, [createVNode(Transition, {\n    name: \"viewer-fade\",\n    appear: \"\"\n  }, {\n    default: withCtx(() => [createElementVNode(\"div\", {\n      ref: \"wrapper\",\n      tabindex: -1,\n      class: normalizeClass(_ctx.ns.e(\"wrapper\")),\n      style: normalizeStyle({\n        zIndex: _ctx.computedZIndex\n      })\n    }, [createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.e(\"mask\")),\n      onClick: _cache[0] || (_cache[0] = withModifiers($event => _ctx.hideOnClickModal && _ctx.hide(), [\"self\"]))\n    }, null, 2), createCommentVNode(\" CLOSE \"), createElementVNode(\"span\", {\n      class: normalizeClass([_ctx.ns.e(\"btn\"), _ctx.ns.e(\"close\")]),\n      onClick: _cache[1] || (_cache[1] = (...args) => _ctx.hide && _ctx.hide(...args))\n    }, [createVNode(_component_el_icon, null, {\n      default: withCtx(() => [createVNode(_component_close)]),\n      _: 1\n    })], 2), createCommentVNode(\" ARROW \"), !_ctx.isSingle ? (openBlock(), createElementBlock(Fragment, {\n      key: 0\n    }, [createElementVNode(\"span\", {\n      class: normalizeClass([_ctx.ns.e(\"btn\"), _ctx.ns.e(\"prev\"), _ctx.ns.is(\"disabled\", !_ctx.infinite && _ctx.isFirst)]),\n      onClick: _cache[2] || (_cache[2] = (...args) => _ctx.prev && _ctx.prev(...args))\n    }, [createVNode(_component_el_icon, null, {\n      default: withCtx(() => [createVNode(_component_arrow_left)]),\n      _: 1\n    })], 2), createElementVNode(\"span\", {\n      class: normalizeClass([_ctx.ns.e(\"btn\"), _ctx.ns.e(\"next\"), _ctx.ns.is(\"disabled\", !_ctx.infinite && _ctx.isLast)]),\n      onClick: _cache[3] || (_cache[3] = (...args) => _ctx.next && _ctx.next(...args))\n    }, [createVNode(_component_el_icon, null, {\n      default: withCtx(() => [createVNode(_component_arrow_right)]),\n      _: 1\n    })], 2)], 64)) : createCommentVNode(\"v-if\", true), createCommentVNode(\" ACTIONS \"), createElementVNode(\"div\", {\n      class: normalizeClass([_ctx.ns.e(\"btn\"), _ctx.ns.e(\"actions\")])\n    }, [createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.e(\"actions__inner\"))\n    }, [createVNode(_component_el_icon, {\n      onClick: _cache[4] || (_cache[4] = $event => _ctx.handleActions(\"zoomOut\"))\n    }, {\n      default: withCtx(() => [createVNode(_component_zoom_out)]),\n      _: 1\n    }), createVNode(_component_el_icon, {\n      onClick: _cache[5] || (_cache[5] = $event => _ctx.handleActions(\"zoomIn\"))\n    }, {\n      default: withCtx(() => [createVNode(_component_zoom_in)]),\n      _: 1\n    }), createElementVNode(\"i\", {\n      class: normalizeClass(_ctx.ns.e(\"actions__divider\"))\n    }, null, 2), createVNode(_component_el_icon, {\n      onClick: _ctx.toggleMode\n    }, {\n      default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.mode.icon)))]),\n      _: 1\n    }, 8, [\"onClick\"]), createElementVNode(\"i\", {\n      class: normalizeClass(_ctx.ns.e(\"actions__divider\"))\n    }, null, 2), createVNode(_component_el_icon, {\n      onClick: _cache[6] || (_cache[6] = $event => _ctx.handleActions(\"anticlockwise\"))\n    }, {\n      default: withCtx(() => [createVNode(_component_refresh_left)]),\n      _: 1\n    }), createVNode(_component_el_icon, {\n      onClick: _cache[7] || (_cache[7] = $event => _ctx.handleActions(\"clockwise\"))\n    }, {\n      default: withCtx(() => [createVNode(_component_refresh_right)]),\n      _: 1\n    })], 2)], 2), createCommentVNode(\" CANVAS \"), createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.e(\"canvas\"))\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.urlList, (url, i) => {\n      return withDirectives((openBlock(), createElementBlock(\"img\", {\n        ref_for: true,\n        ref: el => _ctx.imgRefs[i] = el,\n        key: url,\n        src: url,\n        style: normalizeStyle(_ctx.imgStyle),\n        class: normalizeClass(_ctx.ns.e(\"img\")),\n        onLoad: _cache[8] || (_cache[8] = (...args) => _ctx.handleImgLoad && _ctx.handleImgLoad(...args)),\n        onError: _cache[9] || (_cache[9] = (...args) => _ctx.handleImgError && _ctx.handleImgError(...args)),\n        onMousedown: _cache[10] || (_cache[10] = (...args) => _ctx.handleMouseDown && _ctx.handleMouseDown(...args))\n      }, null, 46, _hoisted_1)), [[vShow, i === _ctx.index]]);\n    }), 128))], 2), renderSlot(_ctx.$slots, \"default\")], 6)]),\n    _: 3\n  })], 8, [\"disabled\"]);\n}\n\nvar ImageViewer = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { ImageViewer as default };","map":null,"metadata":{},"sourceType":"module"}