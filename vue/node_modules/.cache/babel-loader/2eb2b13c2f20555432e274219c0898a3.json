{"ast":null,"code":"import { defineComponent, ref, reactive, computed, watch, nextTick, onMounted, onBeforeUnmount, toRefs, resolveComponent, resolveDirective, openBlock, createBlock, Transition, withCtx, withDirectives, createVNode, createElementVNode, createElementBlock, normalizeClass, normalizeStyle, withModifiers, resolveDynamicComponent, createCommentVNode, toDisplayString, withKeys, renderSlot, vShow, createTextVNode } from 'vue';\nimport { ElButton } from '../../button/index.mjs';\nimport '../../../directives/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport { ElOverlay } from '../../overlay/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport TrapFocus from '../../../directives/trap-focus/index.mjs';\nimport { TypeComponents, TypeComponentsMap } from '../../../utils/vue/icon.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useZIndex } from '../../../hooks/use-z-index/index.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { useDraggable } from '../../../hooks/use-draggable/index.mjs';\nimport { on, off } from '../../../utils/dom/event.mjs';\nimport { useSameTarget } from '../../../hooks/use-same-target/index.mjs';\nimport { useModal } from '../../../hooks/use-modal/index.mjs';\nimport { usePreventGlobal } from '../../../hooks/use-prevent-global/index.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { useLockscreen } from '../../../hooks/use-lockscreen/index.mjs';\nimport { useRestoreActive } from '../../../hooks/use-restore-active/index.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElMessageBox\",\n  directives: {\n    TrapFocus\n  },\n  components: {\n    ElButton,\n    ElInput,\n    ElOverlay,\n    ElIcon,\n    ...TypeComponents\n  },\n  inheritAttrs: false,\n  props: {\n    buttonSize: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    modal: {\n      type: Boolean,\n      default: true\n    },\n    lockScroll: {\n      type: Boolean,\n      default: true\n    },\n    showClose: {\n      type: Boolean,\n      default: true\n    },\n    closeOnClickModal: {\n      type: Boolean,\n      default: true\n    },\n    closeOnPressEscape: {\n      type: Boolean,\n      default: true\n    },\n    closeOnHashChange: {\n      type: Boolean,\n      default: true\n    },\n    center: Boolean,\n    draggable: Boolean,\n    roundButton: {\n      default: false,\n      type: Boolean\n    },\n    container: {\n      type: String,\n      default: \"body\"\n    },\n    boxType: {\n      type: String,\n      default: \"\"\n    }\n  },\n  emits: [\"vanish\", \"action\"],\n\n  setup(props, {\n    emit\n  }) {\n    const {\n      t\n    } = useLocale();\n    const visible = ref(false);\n    const {\n      nextZIndex\n    } = useZIndex();\n    const state = reactive({\n      beforeClose: null,\n      callback: null,\n      cancelButtonText: \"\",\n      cancelButtonClass: \"\",\n      confirmButtonText: \"\",\n      confirmButtonClass: \"\",\n      customClass: \"\",\n      customStyle: {},\n      dangerouslyUseHTMLString: false,\n      distinguishCancelAndClose: false,\n      icon: \"\",\n      inputPattern: null,\n      inputPlaceholder: \"\",\n      inputType: \"text\",\n      inputValue: null,\n      inputValidator: null,\n      inputErrorMessage: \"\",\n      message: null,\n      modalFade: true,\n      modalClass: \"\",\n      showCancelButton: false,\n      showConfirmButton: true,\n      type: \"\",\n      title: void 0,\n      showInput: false,\n      action: \"\",\n      confirmButtonLoading: false,\n      cancelButtonLoading: false,\n      confirmButtonDisabled: false,\n      editorErrorMessage: \"\",\n      validateError: false,\n      zIndex: nextZIndex()\n    });\n    const typeClass = computed(() => {\n      const type = state.type;\n      return type && TypeComponentsMap[type] ? `el-message-box-icon--${type}` : \"\";\n    });\n    const btnSize = useSize(computed(() => props.buttonSize), {\n      prop: true,\n      form: true,\n      formItem: true\n    });\n    const iconComponent = computed(() => state.icon || TypeComponentsMap[state.type] || \"\");\n    const hasMessage = computed(() => !!state.message);\n    const rootRef = ref();\n    const headerRef = ref();\n    const inputRef = ref();\n    const confirmRef = ref();\n    const confirmButtonClasses = computed(() => state.confirmButtonClass);\n    watch(() => state.inputValue, async val => {\n      await nextTick();\n\n      if (props.boxType === \"prompt\" && val !== null) {\n        validate();\n      }\n    }, {\n      immediate: true\n    });\n    watch(() => visible.value, val => {\n      if (val) {\n        if (props.boxType === \"alert\" || props.boxType === \"confirm\") {\n          nextTick().then(() => {\n            var _a, _b, _c;\n\n            (_c = (_b = (_a = confirmRef.value) == null ? void 0 : _a.$el) == null ? void 0 : _b.focus) == null ? void 0 : _c.call(_b);\n          });\n        }\n\n        state.zIndex = nextZIndex();\n      }\n\n      if (props.boxType !== \"prompt\") return;\n\n      if (val) {\n        nextTick().then(() => {\n          if (inputRef.value && inputRef.value.$el) {\n            getInputElement().focus();\n          }\n        });\n      } else {\n        state.editorErrorMessage = \"\";\n        state.validateError = false;\n      }\n    });\n    const draggable = computed(() => props.draggable);\n    useDraggable(rootRef, headerRef, draggable);\n    onMounted(async () => {\n      await nextTick();\n\n      if (props.closeOnHashChange) {\n        on(window, \"hashchange\", doClose);\n      }\n    });\n    onBeforeUnmount(() => {\n      if (props.closeOnHashChange) {\n        off(window, \"hashchange\", doClose);\n      }\n    });\n\n    function doClose() {\n      if (!visible.value) return;\n      visible.value = false;\n      nextTick(() => {\n        if (state.action) emit(\"action\", state.action);\n      });\n    }\n\n    const handleWrapperClick = () => {\n      if (props.closeOnClickModal) {\n        handleAction(state.distinguishCancelAndClose ? \"close\" : \"cancel\");\n      }\n    };\n\n    const overlayEvent = useSameTarget(handleWrapperClick);\n\n    const handleInputEnter = () => {\n      if (state.inputType !== \"textarea\") {\n        return handleAction(\"confirm\");\n      }\n    };\n\n    const handleAction = action => {\n      var _a;\n\n      if (props.boxType === \"prompt\" && action === \"confirm\" && !validate()) {\n        return;\n      }\n\n      state.action = action;\n\n      if (state.beforeClose) {\n        (_a = state.beforeClose) == null ? void 0 : _a.call(state, action, state, doClose);\n      } else {\n        doClose();\n      }\n    };\n\n    const validate = () => {\n      if (props.boxType === \"prompt\") {\n        const inputPattern = state.inputPattern;\n\n        if (inputPattern && !inputPattern.test(state.inputValue || \"\")) {\n          state.editorErrorMessage = state.inputErrorMessage || t(\"el.messagebox.error\");\n          state.validateError = true;\n          return false;\n        }\n\n        const inputValidator = state.inputValidator;\n\n        if (typeof inputValidator === \"function\") {\n          const validateResult = inputValidator(state.inputValue);\n\n          if (validateResult === false) {\n            state.editorErrorMessage = state.inputErrorMessage || t(\"el.messagebox.error\");\n            state.validateError = true;\n            return false;\n          }\n\n          if (typeof validateResult === \"string\") {\n            state.editorErrorMessage = validateResult;\n            state.validateError = true;\n            return false;\n          }\n        }\n      }\n\n      state.editorErrorMessage = \"\";\n      state.validateError = false;\n      return true;\n    };\n\n    const getInputElement = () => {\n      const inputRefs = inputRef.value.$refs;\n      return inputRefs.input || inputRefs.textarea;\n    };\n\n    const handleClose = () => {\n      handleAction(\"close\");\n    };\n\n    if (props.closeOnPressEscape) {\n      useModal({\n        handleClose\n      }, visible);\n    } else {\n      usePreventGlobal(visible, \"keydown\", e => e.code === EVENT_CODE.esc);\n    }\n\n    if (props.lockScroll) {\n      useLockscreen(visible);\n    }\n\n    useRestoreActive(visible);\n    return { ...toRefs(state),\n      overlayEvent,\n      visible,\n      hasMessage,\n      typeClass,\n      btnSize,\n      iconComponent,\n      confirmButtonClasses,\n      rootRef,\n      headerRef,\n      inputRef,\n      confirmRef,\n      doClose,\n      handleClose,\n      handleWrapperClick,\n      handleInputEnter,\n      handleAction,\n      t\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"aria-label\"];\nconst _hoisted_2 = {\n  key: 0,\n  ref: \"headerRef\",\n  class: \"el-message-box__header\"\n};\nconst _hoisted_3 = {\n  class: \"el-message-box__title\"\n};\nconst _hoisted_4 = {\n  class: \"el-message-box__content\"\n};\nconst _hoisted_5 = {\n  class: \"el-message-box__container\"\n};\nconst _hoisted_6 = {\n  key: 1,\n  class: \"el-message-box__message\"\n};\nconst _hoisted_7 = {\n  key: 0\n};\nconst _hoisted_8 = [\"innerHTML\"];\nconst _hoisted_9 = {\n  class: \"el-message-box__input\"\n};\nconst _hoisted_10 = {\n  class: \"el-message-box__btns\"\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_close = resolveComponent(\"close\");\n\n  const _component_el_input = resolveComponent(\"el-input\");\n\n  const _component_el_button = resolveComponent(\"el-button\");\n\n  const _component_el_overlay = resolveComponent(\"el-overlay\");\n\n  const _directive_trap_focus = resolveDirective(\"trap-focus\");\n\n  return openBlock(), createBlock(Transition, {\n    name: \"fade-in-linear\",\n    onAfterLeave: _cache[11] || (_cache[11] = $event => _ctx.$emit(\"vanish\"))\n  }, {\n    default: withCtx(() => [withDirectives(createVNode(_component_el_overlay, {\n      \"z-index\": _ctx.zIndex,\n      \"overlay-class\": [\"is-message-box\", _ctx.modalClass],\n      mask: _ctx.modal\n    }, {\n      default: withCtx(() => [createElementVNode(\"div\", {\n        class: \"el-overlay-message-box\",\n        onClick: _cache[8] || (_cache[8] = (...args) => _ctx.overlayEvent.onClick && _ctx.overlayEvent.onClick(...args)),\n        onMousedown: _cache[9] || (_cache[9] = (...args) => _ctx.overlayEvent.onMousedown && _ctx.overlayEvent.onMousedown(...args)),\n        onMouseup: _cache[10] || (_cache[10] = (...args) => _ctx.overlayEvent.onMouseup && _ctx.overlayEvent.onMouseup(...args))\n      }, [withDirectives((openBlock(), createElementBlock(\"div\", {\n        ref: \"rootRef\",\n        role: \"dialog\",\n        \"aria-label\": _ctx.title || \"dialog\",\n        \"aria-modal\": \"true\",\n        class: normalizeClass([\"el-message-box\", _ctx.customClass, {\n          \"el-message-box--center\": _ctx.center,\n          \"is-draggable\": _ctx.draggable\n        }]),\n        style: normalizeStyle(_ctx.customStyle),\n        onClick: _cache[7] || (_cache[7] = withModifiers(() => {}, [\"stop\"]))\n      }, [_ctx.title !== null && _ctx.title !== void 0 ? (openBlock(), createElementBlock(\"div\", _hoisted_2, [createElementVNode(\"div\", _hoisted_3, [_ctx.iconComponent && _ctx.center ? (openBlock(), createBlock(_component_el_icon, {\n        key: 0,\n        class: normalizeClass([\"el-message-box__status\", _ctx.typeClass])\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent)))]),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), createElementVNode(\"span\", null, toDisplayString(_ctx.title), 1)]), _ctx.showClose ? (openBlock(), createElementBlock(\"button\", {\n        key: 0,\n        type: \"button\",\n        class: \"el-message-box__headerbtn\",\n        \"aria-label\": \"Close\",\n        onClick: _cache[0] || (_cache[0] = $event => _ctx.handleAction(_ctx.distinguishCancelAndClose ? \"close\" : \"cancel\")),\n        onKeydown: _cache[1] || (_cache[1] = withKeys(withModifiers($event => _ctx.handleAction(_ctx.distinguishCancelAndClose ? \"close\" : \"cancel\"), [\"prevent\"]), [\"enter\"]))\n      }, [createVNode(_component_el_icon, {\n        class: \"el-message-box__close\"\n      }, {\n        default: withCtx(() => [createVNode(_component_close)]),\n        _: 1\n      })], 32)) : createCommentVNode(\"v-if\", true)], 512)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", _hoisted_4, [createElementVNode(\"div\", _hoisted_5, [_ctx.iconComponent && !_ctx.center && _ctx.hasMessage ? (openBlock(), createBlock(_component_el_icon, {\n        key: 0,\n        class: normalizeClass([\"el-message-box__status\", _ctx.typeClass])\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent)))]),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), _ctx.hasMessage ? (openBlock(), createElementBlock(\"div\", _hoisted_6, [renderSlot(_ctx.$slots, \"default\", {}, () => [!_ctx.dangerouslyUseHTMLString ? (openBlock(), createElementBlock(\"p\", _hoisted_7, toDisplayString(_ctx.message), 1)) : (openBlock(), createElementBlock(\"p\", {\n        key: 1,\n        innerHTML: _ctx.message\n      }, null, 8, _hoisted_8))])])) : createCommentVNode(\"v-if\", true)]), withDirectives(createElementVNode(\"div\", _hoisted_9, [createVNode(_component_el_input, {\n        ref: \"inputRef\",\n        modelValue: _ctx.inputValue,\n        \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.inputValue = $event),\n        type: _ctx.inputType,\n        placeholder: _ctx.inputPlaceholder,\n        class: normalizeClass({\n          invalid: _ctx.validateError\n        }),\n        onKeydown: withKeys(withModifiers(_ctx.handleInputEnter, [\"prevent\"]), [\"enter\"])\n      }, null, 8, [\"modelValue\", \"type\", \"placeholder\", \"class\", \"onKeydown\"]), createElementVNode(\"div\", {\n        class: \"el-message-box__errormsg\",\n        style: normalizeStyle({\n          visibility: !!_ctx.editorErrorMessage ? \"visible\" : \"hidden\"\n        })\n      }, toDisplayString(_ctx.editorErrorMessage), 5)], 512), [[vShow, _ctx.showInput]])]), createElementVNode(\"div\", _hoisted_10, [_ctx.showCancelButton ? (openBlock(), createBlock(_component_el_button, {\n        key: 0,\n        loading: _ctx.cancelButtonLoading,\n        class: normalizeClass([_ctx.cancelButtonClass]),\n        round: _ctx.roundButton,\n        size: _ctx.btnSize,\n        onClick: _cache[3] || (_cache[3] = $event => _ctx.handleAction(\"cancel\")),\n        onKeydown: _cache[4] || (_cache[4] = withKeys(withModifiers($event => _ctx.handleAction(\"cancel\"), [\"prevent\"]), [\"enter\"]))\n      }, {\n        default: withCtx(() => [createTextVNode(toDisplayString(_ctx.cancelButtonText || _ctx.t(\"el.messagebox.cancel\")), 1)]),\n        _: 1\n      }, 8, [\"loading\", \"class\", \"round\", \"size\"])) : createCommentVNode(\"v-if\", true), withDirectives(createVNode(_component_el_button, {\n        ref: \"confirmRef\",\n        type: \"primary\",\n        loading: _ctx.confirmButtonLoading,\n        class: normalizeClass([_ctx.confirmButtonClasses]),\n        round: _ctx.roundButton,\n        disabled: _ctx.confirmButtonDisabled,\n        size: _ctx.btnSize,\n        onClick: _cache[5] || (_cache[5] = $event => _ctx.handleAction(\"confirm\")),\n        onKeydown: _cache[6] || (_cache[6] = withKeys(withModifiers($event => _ctx.handleAction(\"confirm\"), [\"prevent\"]), [\"enter\"]))\n      }, {\n        default: withCtx(() => [createTextVNode(toDisplayString(_ctx.confirmButtonText || _ctx.t(\"el.messagebox.confirm\")), 1)]),\n        _: 1\n      }, 8, [\"loading\", \"class\", \"round\", \"disabled\", \"size\"]), [[vShow, _ctx.showConfirmButton]])])], 14, _hoisted_1)), [[_directive_trap_focus]])], 32)]),\n      _: 3\n    }, 8, [\"z-index\", \"overlay-class\", \"mask\"]), [[vShow, _ctx.visible]])]),\n    _: 3\n  });\n}\n\nvar MessageBoxConstructor = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { MessageBoxConstructor as default };","map":null,"metadata":{},"sourceType":"module"}