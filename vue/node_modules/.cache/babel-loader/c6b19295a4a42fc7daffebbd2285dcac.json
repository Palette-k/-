{"ast":null,"code":"import { defineComponent, inject, watch, resolveComponent, openBlock, createBlock, mergeProps, withCtx, renderSlot, createCommentVNode } from 'vue';\nimport '../../slot/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { usePopperTriggerProps } from './popper.mjs';\nimport { POPPER_INJECTION_KEY } from './tokens.mjs';\nimport { unwrapMeasurableEl } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { OnlyChild } from '../../slot/src/only-child.mjs';\nimport { useForwardRef } from '../../../hooks/use-forward-ref/index.mjs';\nimport { isElement } from '../../../utils/types.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElPopperTrigger\",\n  components: {\n    ElOnlyChild: OnlyChild\n  },\n  inheritAttrs: false,\n  props: { ...usePopperTriggerProps,\n    onMouseenter: Function,\n    onMouseleave: Function,\n    onClick: Function,\n    onKeydown: Function,\n    onFocus: Function,\n    onBlur: Function,\n    onContextmenu: Function,\n    id: String,\n    open: Boolean\n  },\n\n  setup(props) {\n    const {\n      triggerRef\n    } = inject(POPPER_INJECTION_KEY, void 0);\n    useForwardRef(triggerRef);\n    watch(() => props.virtualRef, val => {\n      if (val) {\n        triggerRef.value = unwrapMeasurableEl(val);\n      }\n    }, {\n      immediate: true\n    });\n    watch(() => triggerRef.value, (el, prevEl) => {\n      if (isElement(el)) {\n        ;\n        [\"onMouseenter\", \"onMouseleave\", \"onClick\", \"onKeydown\", \"onFocus\", \"onBlur\", \"onContextmenu\"].forEach(eventName => {\n          const handler = props[eventName];\n\n          if (handler) {\n            ;\n            el.addEventListener(eventName.slice(2).toLowerCase(), handler);\n            prevEl == null ? void 0 : prevEl.removeEventListener(eventName.slice(2).toLowerCase(), handler);\n          }\n        });\n      }\n    }, {\n      immediate: true\n    });\n    return {\n      triggerRef\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_only_child = resolveComponent(\"el-only-child\");\n\n  return !_ctx.virtualTriggering ? (openBlock(), createBlock(_component_el_only_child, mergeProps({\n    key: 0\n  }, _ctx.$attrs, {\n    \"aria-describedby\": _ctx.open ? _ctx.id : void 0\n  }), {\n    default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n    _: 3\n  }, 16, [\"aria-describedby\"])) : createCommentVNode(\"v-if\", true);\n}\n\nvar ElPopperTrigger = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { ElPopperTrigger as default };","map":null,"metadata":{},"sourceType":"module"}