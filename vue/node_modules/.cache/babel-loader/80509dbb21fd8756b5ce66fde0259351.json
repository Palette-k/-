{"ast":null,"code":"import { defineComponent, ref, unref, computed, resolveComponent, openBlock, createBlock, mergeProps, withCtx, createElementVNode, normalizeClass, normalizeStyle, resolveDynamicComponent, createCommentVNode, createTextVNode, toDisplayString, createVNode, renderSlot } from 'vue';\nimport { ElButton } from '../../button/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport '../../popper/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { popconfirmProps } from './popconfirm.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useDeprecateAppendToBody } from '../../popper/src/deprecation.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst COMPONENT_NAME = \"ElPopconfirm\";\n\nconst _sfc_main = defineComponent({\n  name: COMPONENT_NAME,\n  components: {\n    ElButton,\n    ElTooltip,\n    ElIcon\n  },\n  props: popconfirmProps,\n\n  setup(props) {\n    const {\n      compatTeleported\n    } = useDeprecateAppendToBody(COMPONENT_NAME, \"appendToBody\");\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"popconfirm\");\n    const tooltipRef = ref();\n\n    const hidePopper = () => {\n      var _a, _b;\n\n      (_b = (_a = unref(tooltipRef)) == null ? void 0 : _a.onClose) == null ? void 0 : _b.call(_a);\n    };\n\n    const handleCallback = () => {\n      hidePopper();\n    };\n\n    const confirm = e => {\n      var _a;\n\n      (_a = props.onConfirm) == null ? void 0 : _a.call(props, e);\n      handleCallback();\n    };\n\n    const cancel = e => {\n      var _a;\n\n      (_a = props.onCancel) == null ? void 0 : _a.call(props, e);\n      handleCallback();\n    };\n\n    const finalConfirmButtonText = computed(() => props.confirmButtonText || t(\"el.popconfirm.confirmButtonText\"));\n    const finalCancelButtonText = computed(() => props.cancelButtonText || t(\"el.popconfirm.cancelButtonText\"));\n    return {\n      finalConfirmButtonText,\n      finalCancelButtonText,\n      tooltipRef,\n      ns,\n      compatTeleported,\n      confirm,\n      cancel\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_el_button = resolveComponent(\"el-button\");\n\n  const _component_el_tooltip = resolveComponent(\"el-tooltip\");\n\n  return openBlock(), createBlock(_component_el_tooltip, mergeProps({\n    ref: \"tooltipRef\"\n  }, _ctx.$attrs, {\n    trigger: \"click\",\n    effect: \"light\",\n    \"popper-class\": `${_ctx.ns.namespace.value}-popover`,\n    teleported: _ctx.compatTeleported,\n    \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n    \"hide-after\": _ctx.hideAfter,\n    persistent: _ctx.persistent\n  }), {\n    content: withCtx(() => [createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.b())\n    }, [createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.e(\"main\"))\n    }, [!_ctx.hideIcon && _ctx.icon ? (openBlock(), createBlock(_component_el_icon, {\n      key: 0,\n      class: normalizeClass(_ctx.ns.e(\"icon\")),\n      style: normalizeStyle({\n        color: _ctx.iconColor\n      })\n    }, {\n      default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))]),\n      _: 1\n    }, 8, [\"class\", \"style\"])) : createCommentVNode(\"v-if\", true), createTextVNode(\" \" + toDisplayString(_ctx.title), 1)], 2), createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.ns.e(\"action\"))\n    }, [createVNode(_component_el_button, {\n      size: \"small\",\n      type: _ctx.cancelButtonType,\n      onClick: _ctx.cancel\n    }, {\n      default: withCtx(() => [createTextVNode(toDisplayString(_ctx.finalCancelButtonText), 1)]),\n      _: 1\n    }, 8, [\"type\", \"onClick\"]), createVNode(_component_el_button, {\n      size: \"small\",\n      type: _ctx.confirmButtonType,\n      onClick: _ctx.confirm\n    }, {\n      default: withCtx(() => [createTextVNode(toDisplayString(_ctx.finalConfirmButtonText), 1)]),\n      _: 1\n    }, 8, [\"type\", \"onClick\"])], 2)], 2)]),\n    default: withCtx(() => [_ctx.$slots.reference ? renderSlot(_ctx.$slots, \"reference\", {\n      key: 0\n    }) : createCommentVNode(\"v-if\", true)]),\n    _: 3\n  }, 16, [\"popper-class\", \"teleported\", \"hide-after\", \"persistent\"]);\n}\n\nvar Popconfirm = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { Popconfirm as default };","map":null,"metadata":{},"sourceType":"module"}