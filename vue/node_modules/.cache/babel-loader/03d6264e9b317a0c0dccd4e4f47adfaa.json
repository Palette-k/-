{"ast":null,"code":"import { warn } from 'vue';\nimport { fromPairs } from 'lodash-unified';\nimport '../types.mjs';\nimport '../objects.mjs';\nimport { isObject, hasOwn } from '@vue/shared';\nconst wrapperKey = Symbol();\nconst propKey = \"__elPropsReservedKey\";\n\nfunction buildProp(option, key) {\n  if (!isObject(option) || !!option[propKey]) return option;\n  const {\n    values,\n    required,\n    default: defaultValue,\n    type,\n    validator\n  } = option;\n\n  const _validator = values || validator ? val => {\n    let valid = false;\n    let allowedValues = [];\n\n    if (values) {\n      allowedValues = Array.from(values);\n\n      if (hasOwn(option, \"default\")) {\n        allowedValues.push(defaultValue);\n      }\n\n      valid || (valid = allowedValues.includes(val));\n    }\n\n    if (validator) valid || (valid = validator(val));\n\n    if (!valid && allowedValues.length > 0) {\n      const allowValuesText = [...new Set(allowedValues)].map(value => JSON.stringify(value)).join(\", \");\n      warn(`Invalid prop: validation failed${key ? ` for prop \"${key}\"` : \"\"}. Expected one of [${allowValuesText}], got value ${JSON.stringify(val)}.`);\n    }\n\n    return valid;\n  } : void 0;\n\n  const prop = {\n    type: isObject(type) && Object.getOwnPropertySymbols(type).includes(wrapperKey) ? type[wrapperKey] : type,\n    required: !!required,\n    validator: _validator,\n    [propKey]: true\n  };\n  if (hasOwn(option, \"default\")) prop.default = defaultValue;\n  return prop;\n}\n\nconst buildProps = props => fromPairs(Object.entries(props).map(([key, option]) => [key, buildProp(option, key)]));\n\nconst definePropType = val => ({\n  [wrapperKey]: val\n});\n\nexport { buildProp, buildProps, definePropType, propKey };","map":null,"metadata":{},"sourceType":"module"}