{"ast":null,"code":"import '../../../constants/index.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\n\nconst useMove = (props, checkedState, propsKey, emit) => {\n  const _emit = (value, type, checked) => {\n    emit(UPDATE_MODEL_EVENT, value);\n    emit(CHANGE_EVENT, value, type, checked);\n  };\n\n  const addToLeft = () => {\n    const currentValue = props.modelValue.slice();\n    checkedState.rightChecked.forEach(item => {\n      const index = currentValue.indexOf(item);\n\n      if (index > -1) {\n        currentValue.splice(index, 1);\n      }\n    });\n\n    _emit(currentValue, \"left\", checkedState.rightChecked);\n  };\n\n  const addToRight = () => {\n    let currentValue = props.modelValue.slice();\n    const itemsToBeMoved = props.data.filter(item => {\n      const itemKey = item[propsKey.value];\n      return checkedState.leftChecked.includes(itemKey) && !props.modelValue.includes(itemKey);\n    }).map(item => item[propsKey.value]);\n    currentValue = props.targetOrder === \"unshift\" ? itemsToBeMoved.concat(currentValue) : currentValue.concat(itemsToBeMoved);\n\n    if (props.targetOrder === \"original\") {\n      currentValue = props.data.filter(item => currentValue.includes(item[propsKey.value])).map(item => item[propsKey.value]);\n    }\n\n    _emit(currentValue, \"right\", checkedState.leftChecked);\n  };\n\n  return {\n    addToLeft,\n    addToRight\n  };\n};\n\nexport { useMove };","map":null,"metadata":{},"sourceType":"module"}