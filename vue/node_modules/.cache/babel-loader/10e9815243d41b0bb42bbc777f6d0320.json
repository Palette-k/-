{"ast":null,"code":"import '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { buildProps } from '../../../utils/vue/props.mjs';\nimport { componentSizes } from '../../../constants/size.mjs';\nimport { isNumber } from '@vueuse/core';\nconst inputNumberProps = buildProps({\n  step: {\n    type: Number,\n    default: 1\n  },\n  stepStrictly: {\n    type: Boolean,\n    default: false\n  },\n  max: {\n    type: Number,\n    default: Infinity\n  },\n  min: {\n    type: Number,\n    default: -Infinity\n  },\n  modelValue: {\n    type: Number\n  },\n  disabled: {\n    type: Boolean,\n    default: false\n  },\n  size: {\n    type: String,\n    values: componentSizes\n  },\n  controls: {\n    type: Boolean,\n    default: true\n  },\n  controlsPosition: {\n    type: String,\n    default: \"\",\n    values: [\"\", \"right\"]\n  },\n  name: String,\n  label: String,\n  placeholder: String,\n  precision: {\n    type: Number,\n    validator: val => val >= 0 && val === parseInt(`${val}`, 10)\n  }\n});\nconst inputNumberEmits = {\n  change: (prev, cur) => prev !== cur,\n  blur: e => e instanceof FocusEvent,\n  focus: e => e instanceof FocusEvent,\n  input: val => isNumber(val),\n  \"update:modelValue\": val => isNumber(val) || val === void 0\n};\nexport { inputNumberEmits, inputNumberProps };","map":null,"metadata":{},"sourceType":"module"}