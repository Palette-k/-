{"ast":null,"code":"import { defineComponent, ref, watch, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, createVNode, withCtx, Fragment, renderList, createBlock } from 'vue';\nimport { isEqual } from 'lodash-unified';\nimport { ElSelect, ElOption } from '../../../select/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport '../../../../utils/index.mjs';\nimport { usePagination } from '../usePagination.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { buildProps, definePropType } from '../../../../utils/vue/props.mjs';\nimport { mutable } from '../../../../utils/typescript.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nconst paginationSizesProps = buildProps({\n  pageSize: {\n    type: Number,\n    required: true\n  },\n  pageSizes: {\n    type: definePropType(Array),\n    default: () => mutable([10, 20, 30, 40, 50, 100])\n  },\n  popperClass: {\n    type: String,\n    default: \"\"\n  },\n  disabled: Boolean,\n  size: {\n    type: String,\n    default: \"default\"\n  }\n});\n\nconst _sfc_main = defineComponent({\n  name: \"ElPaginationSizes\",\n  components: {\n    ElSelect,\n    ElOption\n  },\n  props: paginationSizesProps,\n  emits: [\"page-size-change\"],\n\n  setup(props, {\n    emit\n  }) {\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"pagination\");\n    const pagination = usePagination();\n    const innerPageSize = ref(props.pageSize);\n    watch(() => props.pageSizes, (newVal, oldVal) => {\n      if (isEqual(newVal, oldVal)) return;\n\n      if (Array.isArray(newVal)) {\n        const pageSize = newVal.indexOf(props.pageSize) > -1 ? props.pageSize : props.pageSizes[0];\n        emit(\"page-size-change\", pageSize);\n      }\n    });\n    watch(() => props.pageSize, newVal => {\n      innerPageSize.value = newVal;\n    });\n    const innerPagesizes = computed(() => props.pageSizes);\n\n    function handleChange(val) {\n      var _a;\n\n      if (val !== innerPageSize.value) {\n        innerPageSize.value = val;\n        (_a = pagination.handleSizeChange) == null ? void 0 : _a.call(pagination, Number(val));\n      }\n    }\n\n    return {\n      ns,\n      innerPagesizes,\n      innerPageSize,\n      t,\n      handleChange\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_option = resolveComponent(\"el-option\");\n\n  const _component_el_select = resolveComponent(\"el-select\");\n\n  return openBlock(), createElementBlock(\"span\", {\n    class: normalizeClass(_ctx.ns.e(\"sizes\"))\n  }, [createVNode(_component_el_select, {\n    \"model-value\": _ctx.innerPageSize,\n    disabled: _ctx.disabled,\n    \"popper-class\": _ctx.popperClass,\n    size: _ctx.size,\n    onChange: _ctx.handleChange\n  }, {\n    default: withCtx(() => [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.innerPagesizes, item => {\n      return openBlock(), createBlock(_component_el_option, {\n        key: item,\n        value: item,\n        label: item + _ctx.t(\"el.pagination.pagesize\")\n      }, null, 8, [\"value\", \"label\"]);\n    }), 128))]),\n    _: 1\n  }, 8, [\"model-value\", \"disabled\", \"popper-class\", \"size\", \"onChange\"])], 2);\n}\n\nvar Sizes = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { Sizes as default };","map":null,"metadata":{},"sourceType":"module"}