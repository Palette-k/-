{"ast":null,"code":"import { defineComponent, inject, reactive, ref, computed, watch, h, toRefs, resolveComponent, openBlock, createElementBlock, normalizeClass, createVNode, withCtx, renderSlot, createElementVNode, toDisplayString, createCommentVNode } from 'vue';\nimport { ElButton } from '../../button/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { ArrowLeft, ArrowRight } from '@element-plus/icons-vue';\nimport TransferPanel from './transfer-panel.mjs';\nimport { useComputedData } from './useComputedData.mjs';\nimport { LEFT_CHECK_CHANGE_EVENT, RIGHT_CHECK_CHANGE_EVENT, useCheckedChange } from './useCheckedChange.mjs';\nimport { useMove } from './useMove.mjs';\nimport './transfer.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { elFormItemKey } from '../../../tokens/form.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElTransfer\",\n  components: {\n    TransferPanel,\n    ElButton,\n    ElIcon,\n    ArrowLeft,\n    ArrowRight\n  },\n  props: {\n    data: {\n      type: Array,\n      default: () => []\n    },\n    titles: {\n      type: Array,\n      default: () => []\n    },\n    buttonTexts: {\n      type: Array,\n      default: () => []\n    },\n    filterPlaceholder: {\n      type: String,\n      default: \"\"\n    },\n    filterMethod: Function,\n    leftDefaultChecked: {\n      type: Array,\n      default: () => []\n    },\n    rightDefaultChecked: {\n      type: Array,\n      default: () => []\n    },\n    renderContent: Function,\n    modelValue: {\n      type: Array,\n      default: () => []\n    },\n    format: {\n      type: Object,\n      default: () => ({})\n    },\n    filterable: {\n      type: Boolean,\n      default: false\n    },\n    props: {\n      type: Object,\n      default: () => ({\n        label: \"label\",\n        key: \"key\",\n        disabled: \"disabled\"\n      })\n    },\n    targetOrder: {\n      type: String,\n      default: \"original\",\n      validator: val => {\n        return [\"original\", \"push\", \"unshift\"].includes(val);\n      }\n    }\n  },\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, LEFT_CHECK_CHANGE_EVENT, RIGHT_CHECK_CHANGE_EVENT],\n\n  setup(props, {\n    emit,\n    slots\n  }) {\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"transfer\");\n    const elFormItem = inject(elFormItemKey, {});\n    const checkedState = reactive({\n      leftChecked: [],\n      rightChecked: []\n    });\n    const {\n      propsKey,\n      sourceData,\n      targetData\n    } = useComputedData(props);\n    const {\n      onSourceCheckedChange,\n      onTargetCheckedChange\n    } = useCheckedChange(checkedState, emit);\n    const {\n      addToLeft,\n      addToRight\n    } = useMove(props, checkedState, propsKey, emit);\n    const leftPanel = ref();\n    const rightPanel = ref();\n\n    const clearQuery = which => {\n      switch (which) {\n        case \"left\":\n          leftPanel.value.query = \"\";\n          break;\n\n        case \"right\":\n          rightPanel.value.query = \"\";\n          break;\n      }\n    };\n\n    const hasButtonTexts = computed(() => props.buttonTexts.length === 2);\n    const leftPanelTitle = computed(() => props.titles[0] || t(\"el.transfer.titles.0\"));\n    const rightPanelTitle = computed(() => props.titles[1] || t(\"el.transfer.titles.1\"));\n    const panelFilterPlaceholder = computed(() => props.filterPlaceholder || t(\"el.transfer.filterPlaceholder\"));\n    watch(() => props.modelValue, () => {\n      var _a;\n\n      (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\");\n    });\n    const optionRender = computed(() => option => {\n      if (props.renderContent) return props.renderContent(h, option);\n      if (slots.default) return slots.default({\n        option\n      });\n      return h(\"span\", option[props.props.label] || option[props.props.key]);\n    });\n    return {\n      ns,\n      sourceData,\n      targetData,\n      onSourceCheckedChange,\n      onTargetCheckedChange,\n      addToLeft,\n      addToRight,\n      ...toRefs(checkedState),\n      hasButtonTexts,\n      leftPanelTitle,\n      rightPanelTitle,\n      panelFilterPlaceholder,\n      clearQuery,\n      leftPanel,\n      rightPanel,\n      optionRender\n    };\n  }\n\n});\n\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 0\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_transfer_panel = resolveComponent(\"transfer-panel\");\n\n  const _component_arrow_left = resolveComponent(\"arrow-left\");\n\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_el_button = resolveComponent(\"el-button\");\n\n  const _component_arrow_right = resolveComponent(\"arrow-right\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.ns.b())\n  }, [createVNode(_component_transfer_panel, {\n    ref: \"leftPanel\",\n    data: _ctx.sourceData,\n    \"option-render\": _ctx.optionRender,\n    placeholder: _ctx.panelFilterPlaceholder,\n    title: _ctx.leftPanelTitle,\n    filterable: _ctx.filterable,\n    format: _ctx.format,\n    \"filter-method\": _ctx.filterMethod,\n    \"default-checked\": _ctx.leftDefaultChecked,\n    props: _ctx.props,\n    onCheckedChange: _ctx.onSourceCheckedChange\n  }, {\n    default: withCtx(() => [renderSlot(_ctx.$slots, \"left-footer\")]),\n    _: 3\n  }, 8, [\"data\", \"option-render\", \"placeholder\", \"title\", \"filterable\", \"format\", \"filter-method\", \"default-checked\", \"props\", \"onCheckedChange\"]), createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"buttons\"))\n  }, [createVNode(_component_el_button, {\n    type: \"primary\",\n    class: normalizeClass([_ctx.ns.e(\"button\"), _ctx.ns.is(\"with-texts\", _ctx.hasButtonTexts)]),\n    disabled: _ctx.rightChecked.length === 0,\n    onClick: _ctx.addToLeft\n  }, {\n    default: withCtx(() => [createVNode(_component_el_icon, null, {\n      default: withCtx(() => [createVNode(_component_arrow_left)]),\n      _: 1\n    }), _ctx.buttonTexts[0] !== void 0 ? (openBlock(), createElementBlock(\"span\", _hoisted_1, toDisplayString(_ctx.buttonTexts[0]), 1)) : createCommentVNode(\"v-if\", true)]),\n    _: 1\n  }, 8, [\"class\", \"disabled\", \"onClick\"]), createVNode(_component_el_button, {\n    type: \"primary\",\n    class: normalizeClass([_ctx.ns.e(\"button\"), _ctx.ns.is(\"with-texts\", _ctx.hasButtonTexts)]),\n    disabled: _ctx.leftChecked.length === 0,\n    onClick: _ctx.addToRight\n  }, {\n    default: withCtx(() => [_ctx.buttonTexts[1] !== void 0 ? (openBlock(), createElementBlock(\"span\", _hoisted_2, toDisplayString(_ctx.buttonTexts[1]), 1)) : createCommentVNode(\"v-if\", true), createVNode(_component_el_icon, null, {\n      default: withCtx(() => [createVNode(_component_arrow_right)]),\n      _: 1\n    })]),\n    _: 1\n  }, 8, [\"class\", \"disabled\", \"onClick\"])], 2), createVNode(_component_transfer_panel, {\n    ref: \"rightPanel\",\n    data: _ctx.targetData,\n    \"option-render\": _ctx.optionRender,\n    placeholder: _ctx.panelFilterPlaceholder,\n    filterable: _ctx.filterable,\n    format: _ctx.format,\n    \"filter-method\": _ctx.filterMethod,\n    title: _ctx.rightPanelTitle,\n    \"default-checked\": _ctx.rightDefaultChecked,\n    props: _ctx.props,\n    onCheckedChange: _ctx.onTargetCheckedChange\n  }, {\n    default: withCtx(() => [renderSlot(_ctx.$slots, \"right-footer\")]),\n    _: 3\n  }, 8, [\"data\", \"option-render\", \"placeholder\", \"filterable\", \"format\", \"filter-method\", \"title\", \"default-checked\", \"props\", \"onCheckedChange\"])], 2);\n}\n\nvar Transfer = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { Transfer as default };","map":null,"metadata":{},"sourceType":"module"}