{"ast":null,"code":"import { defineComponent, ref, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, renderSlot, toDisplayString, createVNode, withCtx, createTextVNode, createCommentVNode, createSlots, normalizeProps, guardReactiveProps, Fragment, renderList, createBlock } from 'vue';\nimport dayjs from 'dayjs';\nimport { ElButton, ElButtonGroup } from '../../button/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport DateTable from './date-table2.mjs';\nimport { calendarProps, calendarEmits } from './calendar.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElCalendar\",\n  components: {\n    DateTable,\n    ElButton,\n    ElButtonGroup\n  },\n  props: calendarProps,\n  emits: calendarEmits,\n\n  setup(props, {\n    emit\n  }) {\n    const ns = useNamespace(\"calendar\");\n    const {\n      t,\n      lang\n    } = useLocale();\n    const selectedDay = ref();\n    const now = dayjs().locale(lang.value);\n    const prevMonthDayjs = computed(() => {\n      return date.value.subtract(1, \"month\").date(1);\n    });\n    const curMonthDatePrefix = computed(() => {\n      return dayjs(date.value).locale(lang.value).format(\"YYYY-MM\");\n    });\n    const nextMonthDayjs = computed(() => {\n      return date.value.add(1, \"month\").date(1);\n    });\n    const prevYearDayjs = computed(() => {\n      return date.value.subtract(1, \"year\").date(1);\n    });\n    const nextYearDayjs = computed(() => {\n      return date.value.add(1, \"year\").date(1);\n    });\n    const i18nDate = computed(() => {\n      const pickedMonth = `el.datepicker.month${date.value.format(\"M\")}`;\n      return `${date.value.year()} ${t(\"el.datepicker.year\")} ${t(pickedMonth)}`;\n    });\n    const realSelectedDay = computed({\n      get() {\n        if (!props.modelValue) return selectedDay.value;\n        return date.value;\n      },\n\n      set(val) {\n        if (!val) return;\n        selectedDay.value = val;\n        const result = val.toDate();\n        emit(\"input\", result);\n        emit(\"update:modelValue\", result);\n      }\n\n    });\n    const date = computed(() => {\n      if (!props.modelValue) {\n        if (realSelectedDay.value) {\n          return realSelectedDay.value;\n        } else if (validatedRange.value.length) {\n          return validatedRange.value[0][0];\n        }\n\n        return now;\n      } else {\n        return dayjs(props.modelValue).locale(lang.value);\n      }\n    });\n\n    const calculateValidatedDateRange = (startDayjs, endDayjs) => {\n      const firstDay = startDayjs.startOf(\"week\");\n      const lastDay = endDayjs.endOf(\"week\");\n      const firstMonth = firstDay.get(\"month\");\n      const lastMonth = lastDay.get(\"month\");\n\n      if (firstMonth === lastMonth) {\n        return [[firstDay, lastDay]];\n      } else if (firstMonth + 1 === lastMonth) {\n        const firstMonthLastDay = firstDay.endOf(\"month\");\n        const lastMonthFirstDay = lastDay.startOf(\"month\");\n        const isSameWeek = firstMonthLastDay.isSame(lastMonthFirstDay, \"week\");\n        const lastMonthStartDay = isSameWeek ? lastMonthFirstDay.add(1, \"week\") : lastMonthFirstDay;\n        return [[firstDay, firstMonthLastDay], [lastMonthStartDay.startOf(\"week\"), lastDay]];\n      } else if (firstMonth + 2 === lastMonth) {\n        const firstMonthLastDay = firstDay.endOf(\"month\");\n        const secondMonthFirstDay = firstDay.add(1, \"month\").startOf(\"month\");\n        const secondMonthStartDay = firstMonthLastDay.isSame(secondMonthFirstDay, \"week\") ? secondMonthFirstDay.add(1, \"week\") : secondMonthFirstDay;\n        const secondMonthLastDay = secondMonthStartDay.endOf(\"month\");\n        const lastMonthFirstDay = lastDay.startOf(\"month\");\n        const lastMonthStartDay = secondMonthLastDay.isSame(lastMonthFirstDay, \"week\") ? lastMonthFirstDay.add(1, \"week\") : lastMonthFirstDay;\n        return [[firstDay, firstMonthLastDay], [secondMonthStartDay.startOf(\"week\"), secondMonthLastDay], [lastMonthStartDay.startOf(\"week\"), lastDay]];\n      } else {\n        debugWarn(\"ElCalendar\", \"start time and end time interval must not exceed two months\");\n        return [];\n      }\n    };\n\n    const validatedRange = computed(() => {\n      if (!props.range) return [];\n      const rangeArrDayjs = props.range.map(_ => dayjs(_).locale(lang.value));\n      const [startDayjs, endDayjs] = rangeArrDayjs;\n\n      if (startDayjs.isAfter(endDayjs)) {\n        debugWarn(\"ElCalendar\", \"end time should be greater than start time\");\n        return [];\n      }\n\n      if (startDayjs.isSame(endDayjs, \"month\")) {\n        return calculateValidatedDateRange(startDayjs, endDayjs);\n      } else {\n        if (startDayjs.add(1, \"month\").month() !== endDayjs.month()) {\n          debugWarn(\"ElCalendar\", \"start time and end time interval must not exceed two months\");\n          return [];\n        }\n\n        return calculateValidatedDateRange(startDayjs, endDayjs);\n      }\n    });\n\n    const pickDay = day => {\n      realSelectedDay.value = day;\n    };\n\n    const selectDate = type => {\n      let day;\n\n      if (type === \"prev-month\") {\n        day = prevMonthDayjs.value;\n      } else if (type === \"next-month\") {\n        day = nextMonthDayjs.value;\n      } else if (type === \"prev-year\") {\n        day = prevYearDayjs.value;\n      } else if (type === \"next-year\") {\n        day = nextYearDayjs.value;\n      } else {\n        day = now;\n      }\n\n      if (day.isSame(date.value, \"day\")) return;\n      pickDay(day);\n    };\n\n    return {\n      selectedDay,\n      curMonthDatePrefix,\n      i18nDate,\n      realSelectedDay,\n      date,\n      validatedRange,\n      pickDay,\n      selectDate,\n      t,\n      ns\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_button = resolveComponent(\"el-button\");\n\n  const _component_el_button_group = resolveComponent(\"el-button-group\");\n\n  const _component_date_table = resolveComponent(\"date-table\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.ns.b())\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"header\"))\n  }, [renderSlot(_ctx.$slots, \"header\", {\n    date: _ctx.i18nDate\n  }, () => [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"title\"))\n  }, toDisplayString(_ctx.i18nDate), 3), _ctx.validatedRange.length === 0 ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.e(\"button-group\"))\n  }, [createVNode(_component_el_button_group, null, {\n    default: withCtx(() => [createVNode(_component_el_button, {\n      size: \"small\",\n      onClick: _cache[0] || (_cache[0] = $event => _ctx.selectDate(\"prev-month\"))\n    }, {\n      default: withCtx(() => [createTextVNode(toDisplayString(_ctx.t(\"el.datepicker.prevMonth\")), 1)]),\n      _: 1\n    }), createVNode(_component_el_button, {\n      size: \"small\",\n      onClick: _cache[1] || (_cache[1] = $event => _ctx.selectDate(\"today\"))\n    }, {\n      default: withCtx(() => [createTextVNode(toDisplayString(_ctx.t(\"el.datepicker.today\")), 1)]),\n      _: 1\n    }), createVNode(_component_el_button, {\n      size: \"small\",\n      onClick: _cache[2] || (_cache[2] = $event => _ctx.selectDate(\"next-month\"))\n    }, {\n      default: withCtx(() => [createTextVNode(toDisplayString(_ctx.t(\"el.datepicker.nextMonth\")), 1)]),\n      _: 1\n    })]),\n    _: 1\n  })], 2)) : createCommentVNode(\"v-if\", true)])], 2), _ctx.validatedRange.length === 0 ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.e(\"body\"))\n  }, [createVNode(_component_date_table, {\n    date: _ctx.date,\n    \"selected-day\": _ctx.realSelectedDay,\n    onPick: _ctx.pickDay\n  }, createSlots({\n    _: 2\n  }, [_ctx.$slots.dateCell ? {\n    name: \"dateCell\",\n    fn: withCtx(data => [renderSlot(_ctx.$slots, \"dateCell\", normalizeProps(guardReactiveProps(data)))])\n  } : void 0]), 1032, [\"date\", \"selected-day\", \"onPick\"])], 2)) : (openBlock(), createElementBlock(\"div\", {\n    key: 1,\n    class: normalizeClass(_ctx.ns.e(\"body\"))\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.validatedRange, (range_, index) => {\n    return openBlock(), createBlock(_component_date_table, {\n      key: index,\n      date: range_[0],\n      \"selected-day\": _ctx.realSelectedDay,\n      range: range_,\n      \"hide-header\": index !== 0,\n      onPick: _ctx.pickDay\n    }, createSlots({\n      _: 2\n    }, [_ctx.$slots.dateCell ? {\n      name: \"dateCell\",\n      fn: withCtx(data => [renderSlot(_ctx.$slots, \"dateCell\", normalizeProps(guardReactiveProps(data)))])\n    } : void 0]), 1032, [\"date\", \"selected-day\", \"range\", \"hide-header\", \"onPick\"]);\n  }), 128))], 2))], 2);\n}\n\nvar Calendar = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { Calendar as default };","map":null,"metadata":{},"sourceType":"module"}