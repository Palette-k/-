{"ast":null,"code":"import { defineComponent, ref, provide, computed, openBlock, createBlock, Teleport, createVNode, Transition, unref, withCtx, withDirectives, createElementVNode, normalizeClass, normalizeStyle, renderSlot, createCommentVNode, vShow } from 'vue';\nimport { ElOverlay } from '../../overlay/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport _sfc_main$1 from './dialog-content2.mjs';\nimport { dialogProps, dialogEmits } from './dialog.mjs';\nimport { useDialog } from './use-dialog.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { dialogInjectionKey } from '../../../tokens/dialog.mjs';\nimport { useSameTarget } from '../../../hooks/use-same-target/index.mjs';\nimport { useDraggable } from '../../../hooks/use-draggable/index.mjs';\nconst __default__ = {\n  name: \"ElDialog\"\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: dialogProps,\n  emits: dialogEmits,\n\n  setup(__props, {\n    expose\n  }) {\n    const props = __props;\n    const ns = useNamespace(\"dialog\");\n    const dialogRef = ref();\n    const headerRef = ref();\n    const {\n      visible,\n      style,\n      rendered,\n      zIndex,\n      afterEnter,\n      afterLeave,\n      beforeLeave,\n      handleClose,\n      onModalClick\n    } = useDialog(props, dialogRef);\n    provide(dialogInjectionKey, {\n      dialogRef,\n      headerRef,\n      ns,\n      rendered,\n      style\n    });\n    const overlayEvent = useSameTarget(onModalClick);\n    const draggable = computed(() => props.draggable && !props.fullscreen);\n    useDraggable(dialogRef, headerRef, draggable);\n    expose({\n      visible\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(Teleport, {\n        to: \"body\",\n        disabled: !_ctx.appendToBody\n      }, [createVNode(Transition, {\n        name: \"dialog-fade\",\n        onAfterEnter: unref(afterEnter),\n        onAfterLeave: unref(afterLeave),\n        onBeforeLeave: unref(beforeLeave)\n      }, {\n        default: withCtx(() => [withDirectives(createVNode(unref(ElOverlay), {\n          \"custom-mask-event\": \"\",\n          mask: _ctx.modal,\n          \"overlay-class\": _ctx.modalClass,\n          \"z-index\": unref(zIndex)\n        }, {\n          default: withCtx(() => [createElementVNode(\"div\", {\n            class: normalizeClass(`${unref(ns).namespace.value}-overlay-dialog`),\n            onClick: _cache[0] || (_cache[0] = (...args) => unref(overlayEvent).onClick && unref(overlayEvent).onClick(...args)),\n            onMousedown: _cache[1] || (_cache[1] = (...args) => unref(overlayEvent).onMousedown && unref(overlayEvent).onMousedown(...args)),\n            onMouseup: _cache[2] || (_cache[2] = (...args) => unref(overlayEvent).onMouseup && unref(overlayEvent).onMouseup(...args))\n          }, [unref(rendered) ? (openBlock(), createBlock(_sfc_main$1, {\n            key: 0,\n            \"custom-class\": _ctx.customClass,\n            center: _ctx.center,\n            \"close-icon\": _ctx.closeIcon,\n            draggable: unref(draggable),\n            fullscreen: _ctx.fullscreen,\n            \"show-close\": _ctx.showClose,\n            style: normalizeStyle(unref(style)),\n            title: _ctx.title,\n            onClose: unref(handleClose)\n          }, {\n            title: withCtx(() => [renderSlot(_ctx.$slots, \"title\")]),\n            footer: withCtx(() => [renderSlot(_ctx.$slots, \"footer\")]),\n            default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n            _: 3\n          }, 8, [\"custom-class\", \"center\", \"close-icon\", \"draggable\", \"fullscreen\", \"show-close\", \"style\", \"title\", \"onClose\"])) : createCommentVNode(\"v-if\", true)], 34)]),\n          _: 3\n        }, 8, [\"mask\", \"overlay-class\", \"z-index\"]), [[vShow, unref(visible)]])]),\n        _: 3\n      }, 8, [\"onAfterEnter\", \"onAfterLeave\", \"onBeforeLeave\"])], 8, [\"disabled\"]);\n    };\n  }\n\n});\n\nexport { _sfc_main as default };","map":null,"metadata":{},"sourceType":"module"}