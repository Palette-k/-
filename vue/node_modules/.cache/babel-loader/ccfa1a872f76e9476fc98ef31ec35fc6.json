{"ast":null,"code":"import { defineComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, withDirectives, vModelCheckbox, renderSlot, Fragment, createTextVNode, toDisplayString, createCommentVNode } from 'vue';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { useCheckbox } from './useCheckbox.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElCheckbox\",\n  props: {\n    modelValue: {\n      type: [Boolean, Number, String],\n      default: () => void 0\n    },\n    label: {\n      type: [String, Boolean, Number, Object]\n    },\n    indeterminate: Boolean,\n    disabled: Boolean,\n    checked: Boolean,\n    name: {\n      type: String,\n      default: void 0\n    },\n    trueLabel: {\n      type: [String, Number],\n      default: void 0\n    },\n    falseLabel: {\n      type: [String, Number],\n      default: void 0\n    },\n    id: {\n      type: String,\n      default: void 0\n    },\n    controls: {\n      type: String,\n      default: void 0\n    },\n    border: Boolean,\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    tabindex: [String, Number]\n  },\n  emits: [UPDATE_MODEL_EVENT, \"change\"],\n\n  setup(props) {\n    const ns = useNamespace(\"checkbox\");\n    return {\n      ns,\n      ...useCheckbox(props)\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"id\", \"aria-controls\"];\nconst _hoisted_2 = [\"tabindex\", \"role\", \"aria-checked\"];\nconst _hoisted_3 = [\"aria-hidden\", \"name\", \"tabindex\", \"disabled\", \"true-value\", \"false-value\"];\nconst _hoisted_4 = [\"aria-hidden\", \"disabled\", \"value\", \"name\", \"tabindex\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"label\", {\n    id: _ctx.id,\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.m(_ctx.checkboxSize), _ctx.ns.is(\"disabled\", _ctx.isDisabled), _ctx.ns.is(\"bordered\", _ctx.border), _ctx.ns.is(\"checked\", _ctx.isChecked)]),\n    \"aria-controls\": _ctx.indeterminate ? _ctx.controls : null\n  }, [createElementVNode(\"span\", {\n    class: normalizeClass([_ctx.ns.e(\"input\"), _ctx.ns.is(\"disabled\", _ctx.isDisabled), _ctx.ns.is(\"checked\", _ctx.isChecked), _ctx.ns.is(\"indeterminate\", _ctx.indeterminate), _ctx.ns.is(\"focus\", _ctx.focus)]),\n    tabindex: _ctx.indeterminate ? 0 : void 0,\n    role: _ctx.indeterminate ? \"checkbox\" : void 0,\n    \"aria-checked\": _ctx.indeterminate ? \"mixed\" : false\n  }, [createElementVNode(\"span\", {\n    class: normalizeClass(_ctx.ns.e(\"inner\"))\n  }, null, 2), _ctx.trueLabel || _ctx.falseLabel ? withDirectives((openBlock(), createElementBlock(\"input\", {\n    key: 0,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.model = $event),\n    class: normalizeClass(_ctx.ns.e(\"original\")),\n    type: \"checkbox\",\n    \"aria-hidden\": _ctx.indeterminate ? \"true\" : \"false\",\n    name: _ctx.name,\n    tabindex: _ctx.tabindex,\n    disabled: _ctx.isDisabled,\n    \"true-value\": _ctx.trueLabel,\n    \"false-value\": _ctx.falseLabel,\n    onChange: _cache[1] || (_cache[1] = (...args) => _ctx.handleChange && _ctx.handleChange(...args)),\n    onFocus: _cache[2] || (_cache[2] = $event => _ctx.focus = true),\n    onBlur: _cache[3] || (_cache[3] = $event => _ctx.focus = false)\n  }, null, 42, _hoisted_3)), [[vModelCheckbox, _ctx.model]]) : withDirectives((openBlock(), createElementBlock(\"input\", {\n    key: 1,\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => _ctx.model = $event),\n    class: normalizeClass(_ctx.ns.e(\"original\")),\n    type: \"checkbox\",\n    \"aria-hidden\": _ctx.indeterminate ? \"true\" : \"false\",\n    disabled: _ctx.isDisabled,\n    value: _ctx.label,\n    name: _ctx.name,\n    tabindex: _ctx.tabindex,\n    onChange: _cache[5] || (_cache[5] = (...args) => _ctx.handleChange && _ctx.handleChange(...args)),\n    onFocus: _cache[6] || (_cache[6] = $event => _ctx.focus = true),\n    onBlur: _cache[7] || (_cache[7] = $event => _ctx.focus = false)\n  }, null, 42, _hoisted_4)), [[vModelCheckbox, _ctx.model]])], 10, _hoisted_2), _ctx.$slots.default || _ctx.label ? (openBlock(), createElementBlock(\"span\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.e(\"label\"))\n  }, [renderSlot(_ctx.$slots, \"default\"), !_ctx.$slots.default ? (openBlock(), createElementBlock(Fragment, {\n    key: 0\n  }, [createTextVNode(toDisplayString(_ctx.label), 1)], 2112)) : createCommentVNode(\"v-if\", true)], 2)) : createCommentVNode(\"v-if\", true)], 10, _hoisted_1);\n}\n\nvar Checkbox = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { Checkbox as default };","map":null,"metadata":{},"sourceType":"module"}