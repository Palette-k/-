{"ast":null,"code":"import { defineComponent, ref, inject, getCurrentInstance, onMounted, watch, onBeforeUnmount, computed, reactive, resolveComponent, openBlock, createElementBlock, normalizeStyle, normalizeClass, createCommentVNode, createElementVNode, renderSlot, createBlock, withCtx, resolveDynamicComponent, toDisplayString, createTextVNode } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { Close, Check } from '@element-plus/icons-vue';\nimport '../../../hooks/index.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElStep\",\n  components: {\n    ElIcon,\n    Close,\n    Check\n  },\n  props: {\n    title: {\n      type: String,\n      default: \"\"\n    },\n    icon: {\n      type: [String, Object],\n      default: \"\"\n    },\n    description: {\n      type: String,\n      default: \"\"\n    },\n    status: {\n      type: String,\n      default: \"\",\n      validator: val => [\"\", \"wait\", \"process\", \"finish\", \"error\", \"success\"].includes(val)\n    }\n  },\n\n  setup(props) {\n    const ns = useNamespace(\"step\");\n    const index = ref(-1);\n    const lineStyle = ref({});\n    const internalStatus = ref(\"\");\n    const parent = inject(\"ElSteps\");\n    const currentInstance = getCurrentInstance();\n    onMounted(() => {\n      watch([() => parent.props.active, () => parent.props.processStatus, () => parent.props.finishStatus], ([active]) => {\n        updateStatus(active);\n      }, {\n        immediate: true\n      });\n    });\n    onBeforeUnmount(() => {\n      parent.steps.value = parent.steps.value.filter(instance => instance.uid !== currentInstance.uid);\n    });\n    const currentStatus = computed(() => {\n      return props.status || internalStatus.value;\n    });\n    const prevStatus = computed(() => {\n      const prevStep = parent.steps.value[index.value - 1];\n      return prevStep ? prevStep.currentStatus : \"wait\";\n    });\n    const isCenter = computed(() => {\n      return parent.props.alignCenter;\n    });\n    const isVertical = computed(() => {\n      return parent.props.direction === \"vertical\";\n    });\n    const isSimple = computed(() => {\n      return parent.props.simple;\n    });\n    const stepsCount = computed(() => {\n      return parent.steps.value.length;\n    });\n    const isLast = computed(() => {\n      var _a;\n\n      return ((_a = parent.steps.value[stepsCount.value - 1]) == null ? void 0 : _a.uid) === currentInstance.uid;\n    });\n    const space = computed(() => {\n      return isSimple.value ? \"\" : parent.props.space;\n    });\n    const style = computed(() => {\n      const style2 = {\n        flexBasis: typeof space.value === \"number\" ? `${space.value}px` : space.value ? space.value : `${100 / (stepsCount.value - (isCenter.value ? 0 : 1))}%`\n      };\n      if (isVertical.value) return style2;\n\n      if (isLast.value) {\n        style2.maxWidth = `${100 / stepsCount.value}%`;\n      }\n\n      return style2;\n    });\n\n    const setIndex = val => {\n      index.value = val;\n    };\n\n    const calcProgress = status => {\n      let step = 100;\n      const style2 = {};\n      style2.transitionDelay = `${150 * index.value}ms`;\n\n      if (status === parent.props.processStatus) {\n        step = 0;\n      } else if (status === \"wait\") {\n        step = 0;\n        style2.transitionDelay = `${-150 * index.value}ms`;\n      }\n\n      style2.borderWidth = step && !isSimple.value ? \"1px\" : 0;\n      style2[parent.props.direction === \"vertical\" ? \"height\" : \"width\"] = `${step}%`;\n      lineStyle.value = style2;\n    };\n\n    const updateStatus = activeIndex => {\n      if (activeIndex > index.value) {\n        internalStatus.value = parent.props.finishStatus;\n      } else if (activeIndex === index.value && prevStatus.value !== \"error\") {\n        internalStatus.value = parent.props.processStatus;\n      } else {\n        internalStatus.value = \"wait\";\n      }\n\n      const prevChild = parent.steps.value[stepsCount.value - 1];\n      if (prevChild) prevChild.calcProgress(internalStatus.value);\n    };\n\n    const stepItemState = reactive({\n      uid: computed(() => currentInstance.uid),\n      currentStatus,\n      setIndex,\n      calcProgress\n    });\n    parent.steps.value = [...parent.steps.value, stepItemState];\n    return {\n      ns,\n      index,\n      lineStyle,\n      currentStatus,\n      isCenter,\n      isVertical,\n      isSimple,\n      isLast,\n      space,\n      style,\n      parent,\n      setIndex,\n      calcProgress,\n      updateStatus\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_check = resolveComponent(\"check\");\n\n  const _component_close = resolveComponent(\"close\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    style: normalizeStyle(_ctx.style),\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.is(_ctx.isSimple ? \"simple\" : _ctx.parent.props.direction), _ctx.ns.is(\"flex\", _ctx.isLast && !_ctx.space && !_ctx.isCenter), _ctx.ns.is(\"center\", _ctx.isCenter && !_ctx.isVertical && !_ctx.isSimple)])\n  }, [createCommentVNode(\" icon & line \"), createElementVNode(\"div\", {\n    class: normalizeClass([_ctx.ns.e(\"head\"), _ctx.ns.is(_ctx.currentStatus)])\n  }, [!_ctx.isSimple ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.e(\"line\"))\n  }, [createElementVNode(\"i\", {\n    class: normalizeClass(_ctx.ns.e(\"line-inner\")),\n    style: normalizeStyle(_ctx.lineStyle)\n  }, null, 6)], 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n    class: normalizeClass([_ctx.ns.e(\"icon\"), _ctx.ns.is(_ctx.icon ? \"icon\" : \"text\")])\n  }, [_ctx.currentStatus !== \"success\" && _ctx.currentStatus !== \"error\" ? renderSlot(_ctx.$slots, \"icon\", {\n    key: 0\n  }, () => [_ctx.icon ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: normalizeClass(_ctx.ns.e(\"icon-inner\"))\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))]),\n    _: 1\n  }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), !_ctx.icon && !_ctx.isSimple ? (openBlock(), createElementBlock(\"div\", {\n    key: 1,\n    class: normalizeClass(_ctx.ns.e(\"icon-inner\"))\n  }, toDisplayString(_ctx.index + 1), 3)) : createCommentVNode(\"v-if\", true)]) : (openBlock(), createBlock(_component_el_icon, {\n    key: 1,\n    class: normalizeClass([_ctx.ns.e(\"icon-inner\"), _ctx.ns.is(\"status\")])\n  }, {\n    default: withCtx(() => [_ctx.currentStatus === \"success\" ? (openBlock(), createBlock(_component_check, {\n      key: 0\n    })) : (openBlock(), createBlock(_component_close, {\n      key: 1\n    }))]),\n    _: 1\n  }, 8, [\"class\"]))], 2)], 2), createCommentVNode(\" title & description \"), createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"main\"))\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass([_ctx.ns.e(\"title\"), _ctx.ns.is(_ctx.currentStatus)])\n  }, [renderSlot(_ctx.$slots, \"title\", {}, () => [createTextVNode(toDisplayString(_ctx.title), 1)])], 2), _ctx.isSimple ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.e(\"arrow\"))\n  }, null, 2)) : (openBlock(), createElementBlock(\"div\", {\n    key: 1,\n    class: normalizeClass([_ctx.ns.e(\"description\"), _ctx.ns.is(_ctx.currentStatus)])\n  }, [renderSlot(_ctx.$slots, \"description\", {}, () => [createTextVNode(toDisplayString(_ctx.description), 1)])], 2))], 2)], 6);\n}\n\nvar Step = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { Step as default };","map":null,"metadata":{},"sourceType":"module"}