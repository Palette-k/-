{"ast":null,"code":"import { defineComponent, inject, ref, provide, computed, unref, onMounted, watch, openBlock, createElementBlock, normalizeStyle, normalizeClass, renderSlot } from 'vue';\nimport { createPopper } from '@popperjs/core';\nimport '../../../hooks/index.mjs';\nimport { POPPER_INJECTION_KEY, POPPER_CONTENT_INJECTION_KEY } from './tokens.mjs';\nimport { usePopperContentProps } from './popper.mjs';\nimport { buildPopperOptions, unwrapMeasurableEl } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useZIndex } from '../../../hooks/use-z-index/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElPopperContent\",\n  props: usePopperContentProps,\n  emits: [\"mouseenter\", \"mouseleave\"],\n\n  setup(props) {\n    const {\n      triggerRef,\n      popperInstanceRef,\n      contentRef\n    } = inject(POPPER_INJECTION_KEY, void 0);\n    const {\n      nextZIndex\n    } = useZIndex();\n    const ns = useNamespace(\"popper\");\n    const popperContentRef = ref(null);\n    const arrowRef = ref(null);\n    const arrowOffset = ref();\n    provide(POPPER_CONTENT_INJECTION_KEY, {\n      arrowRef,\n      arrowOffset\n    });\n    const contentZIndex = ref(props.zIndex || nextZIndex());\n    const contentStyle = computed(() => [{\n      zIndex: unref(contentZIndex)\n    }, props.popperStyle]);\n    const contentClass = computed(() => [ns.b(), ns.is(\"pure\", props.pure), ns.is(props.effect), props.popperClass]);\n\n    const createPopperInstance = ({\n      referenceEl,\n      popperContentEl,\n      arrowEl\n    }) => {\n      const options = buildPopperOptions(props, {\n        arrowEl,\n        arrowOffset: unref(arrowOffset)\n      });\n      return createPopper(referenceEl, popperContentEl, options);\n    };\n\n    const updatePopper = () => {\n      var _a;\n\n      (_a = unref(popperInstanceRef)) == null ? void 0 : _a.update();\n      contentZIndex.value = props.zIndex || nextZIndex();\n    };\n\n    const togglePopoerAlive = () => {\n      var _a;\n\n      const monitorable = {\n        name: \"eventListeners\",\n        enabled: props.visible\n      };\n      (_a = unref(popperInstanceRef)) == null ? void 0 : _a.setOptions(options => ({ ...options,\n        modifiers: [...options.modifiers, monitorable]\n      }));\n    };\n\n    onMounted(() => {\n      let updateHandle;\n      watch(() => unwrapMeasurableEl(props.referenceEl) || unref(triggerRef), val => {\n        var _a;\n\n        updateHandle == null ? void 0 : updateHandle();\n\n        if (val) {\n          (_a = popperInstanceRef.value) == null ? void 0 : _a.destroy();\n          const popperContentEl = unref(popperContentRef);\n          contentRef.value = popperContentEl;\n          const arrowEl = unref(arrowRef);\n          const newInstance = createPopperInstance({\n            referenceEl: val,\n            popperContentEl: unref(popperContentRef),\n            arrowEl\n          });\n          popperInstanceRef.value = newInstance;\n          updateHandle = watch(() => val.getBoundingClientRect(), () => {\n            updatePopper();\n          }, {\n            immediate: true\n          });\n        } else {\n          popperInstanceRef.value = null;\n        }\n      }, {\n        immediate: true\n      });\n      watch(() => props.visible, togglePopoerAlive, {\n        immediate: true\n      });\n      watch(() => buildPopperOptions(props, {\n        arrowEl: unref(arrowRef),\n        arrowOffset: unref(arrowOffset)\n      }), option => {\n        var _a;\n\n        return (_a = popperInstanceRef.value) == null ? void 0 : _a.setOptions(option);\n      });\n    });\n    return {\n      ns,\n      popperContentRef,\n      popperInstanceRef,\n      contentStyle,\n      contentClass,\n      updatePopper\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"popperContentRef\",\n    style: normalizeStyle(_ctx.contentStyle),\n    class: normalizeClass(_ctx.contentClass),\n    role: \"tooltip\",\n    onMouseenter: _cache[0] || (_cache[0] = e => _ctx.$emit(\"mouseenter\", e)),\n    onMouseleave: _cache[1] || (_cache[1] = e => _ctx.$emit(\"mouseleave\", e))\n  }, [renderSlot(_ctx.$slots, \"default\")], 38);\n}\n\nvar ElPopperContent = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { ElPopperContent as default };","map":null,"metadata":{},"sourceType":"module"}