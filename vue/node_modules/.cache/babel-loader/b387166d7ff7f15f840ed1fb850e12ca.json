{"ast":null,"code":"import { defineComponent, ref, computed, unref, resolveComponent, openBlock, createBlock, mergeProps, withCtx, createElementBlock, normalizeClass, toDisplayString, createCommentVNode, renderSlot, createTextVNode } from 'vue';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport '../../popper/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { usePopoverProps } from './popover.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { isString } from '@vue/shared';\nimport { useDeprecateAppendToBody } from '../../popper/src/deprecation.mjs';\nconst emits = [\"update:visible\", \"before-enter\", \"before-leave\", \"after-enter\", \"after-leave\"];\nconst COMPONENT_NAME = \"ElPopover\";\n\nconst _sfc_main = defineComponent({\n  name: COMPONENT_NAME,\n  components: {\n    ElTooltip\n  },\n  props: usePopoverProps,\n  emits,\n\n  setup(props, {\n    emit\n  }) {\n    const ns = useNamespace(\"popover\");\n    const tooltipRef = ref(null);\n    const popperRef = computed(() => {\n      var _a;\n\n      return (_a = unref(tooltipRef)) == null ? void 0 : _a.popperRef;\n    });\n    const width = computed(() => {\n      if (isString(props.width)) {\n        return props.width;\n      }\n\n      return `${props.width}px`;\n    });\n    const style = computed(() => {\n      return [{\n        width: width.value\n      }, props.popperStyle];\n    });\n    const kls = computed(() => {\n      return [ns.b(), props.popperClass, {\n        [ns.m(\"plain\")]: !!props.content\n      }];\n    });\n    const gpuAcceleration = computed(() => {\n      return props.transition === \"el-fade-in-linear\";\n    });\n    const {\n      compatTeleported\n    } = useDeprecateAppendToBody(COMPONENT_NAME, \"appendToBody\");\n\n    const hide = () => {\n      var _a;\n\n      (_a = tooltipRef.value) == null ? void 0 : _a.hide();\n    };\n\n    const beforeEnter = () => {\n      emit(\"before-enter\");\n    };\n\n    const beforeLeave = () => {\n      emit(\"before-leave\");\n    };\n\n    const afterEnter = () => {\n      emit(\"after-enter\");\n    };\n\n    const afterLeave = () => {\n      emit(\"after-leave\");\n    };\n\n    return {\n      compatTeleported,\n      ns,\n      kls,\n      gpuAcceleration,\n      style,\n      tooltipRef,\n      popperRef,\n      hide,\n      beforeEnter,\n      beforeLeave,\n      afterEnter,\n      afterLeave\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tooltip = resolveComponent(\"el-tooltip\");\n\n  return openBlock(), createBlock(_component_el_tooltip, mergeProps({\n    ref: \"tooltipRef\"\n  }, _ctx.$attrs, {\n    trigger: _ctx.trigger,\n    placement: _ctx.placement,\n    disabled: _ctx.disabled,\n    visible: _ctx.visible,\n    transition: _ctx.transition,\n    \"popper-options\": _ctx.popperOptions,\n    tabindex: _ctx.tabindex,\n    \"append-to-body\": _ctx.appendToBody,\n    content: _ctx.content,\n    offset: _ctx.offset,\n    \"show-after\": _ctx.showAfter,\n    \"hide-after\": _ctx.hideAfter,\n    \"auto-close\": _ctx.autoClose,\n    \"show-arrow\": _ctx.showArrow,\n    \"aria-label\": _ctx.title,\n    effect: _ctx.effect,\n    enterable: _ctx.enterable,\n    \"popper-class\": _ctx.kls,\n    \"popper-style\": _ctx.style,\n    teleported: _ctx.compatTeleported,\n    persistent: _ctx.persistent,\n    \"gpu-acceleration\": _ctx.gpuAcceleration,\n    onBeforeShow: _ctx.beforeEnter,\n    onBeforeHide: _ctx.beforeLeave,\n    onShow: _ctx.afterEnter,\n    onHide: _ctx.afterLeave\n  }), {\n    content: withCtx(() => [_ctx.title ? (openBlock(), createElementBlock(\"div\", {\n      key: 0,\n      class: normalizeClass(_ctx.ns.e(\"title\")),\n      role: \"title\"\n    }, toDisplayString(_ctx.title), 3)) : createCommentVNode(\"v-if\", true), renderSlot(_ctx.$slots, \"default\", {}, () => [createTextVNode(toDisplayString(_ctx.content), 1)])]),\n    default: withCtx(() => [_ctx.$slots.reference ? renderSlot(_ctx.$slots, \"reference\", {\n      key: 0\n    }) : createCommentVNode(\"v-if\", true)]),\n    _: 3\n  }, 16, [\"trigger\", \"placement\", \"disabled\", \"visible\", \"transition\", \"popper-options\", \"tabindex\", \"append-to-body\", \"content\", \"offset\", \"show-after\", \"hide-after\", \"auto-close\", \"show-arrow\", \"aria-label\", \"effect\", \"enterable\", \"popper-class\", \"popper-style\", \"teleported\", \"persistent\", \"gpu-acceleration\", \"onBeforeShow\", \"onBeforeHide\", \"onShow\", \"onHide\"]);\n}\n\nvar Popover = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { Popover as default };","map":null,"metadata":{},"sourceType":"module"}