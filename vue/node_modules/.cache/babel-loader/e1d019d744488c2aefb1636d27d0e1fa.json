{"ast":null,"code":"import { defineComponent, reactive, ref, computed, watch, onMounted, nextTick, onBeforeUnmount, provide, resolveComponent, openBlock, createElementBlock, normalizeClass, withModifiers, createElementVNode, normalizeStyle, createBlock, Transition, withCtx, withDirectives, createVNode, vShow, createCommentVNode, renderSlot, Fragment, renderList, toDisplayString } from 'vue';\nimport { throttle } from 'lodash-unified';\nimport '../../../utils/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { ArrowLeft, ArrowRight } from '@element-plus/icons-vue';\nimport '../../../hooks/index.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { addResizeListener, removeResizeListener } from '../../../utils/dom/resize-event.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElCarousel\",\n  components: {\n    ElIcon,\n    ArrowLeft,\n    ArrowRight\n  },\n  props: {\n    initialIndex: {\n      type: Number,\n      default: 0\n    },\n    height: {\n      type: String,\n      default: \"\"\n    },\n    trigger: {\n      type: String,\n      default: \"hover\"\n    },\n    autoplay: {\n      type: Boolean,\n      default: true\n    },\n    interval: {\n      type: Number,\n      default: 3e3\n    },\n    indicatorPosition: {\n      type: String,\n      default: \"\"\n    },\n    indicator: {\n      type: Boolean,\n      default: true\n    },\n    arrow: {\n      type: String,\n      default: \"hover\"\n    },\n    type: {\n      type: String,\n      default: \"\"\n    },\n    loop: {\n      type: Boolean,\n      default: true\n    },\n    direction: {\n      type: String,\n      default: \"horizontal\",\n\n      validator(val) {\n        return [\"horizontal\", \"vertical\"].includes(val);\n      }\n\n    },\n    pauseOnHover: {\n      type: Boolean,\n      default: true\n    }\n  },\n  emits: [\"change\"],\n\n  setup(props, {\n    emit\n  }) {\n    const ns = useNamespace(\"carousel\");\n    const data = reactive({\n      activeIndex: -1,\n      containerWidth: 0,\n      timer: null,\n      hover: false\n    });\n    const root = ref(null);\n    const items = ref([]);\n    const arrowDisplay = computed(() => props.arrow !== \"never\" && props.direction !== \"vertical\");\n    const hasLabel = computed(() => {\n      return items.value.some(item => item.label.toString().length > 0);\n    });\n    const carouselClasses = computed(() => {\n      const classes = [ns.b(), ns.m(props.direction)];\n\n      if (props.type === \"card\") {\n        classes.push(ns.m(\"card\"));\n      }\n\n      return classes;\n    });\n    const indicatorsClasses = computed(() => {\n      const classes = [ns.e(\"indicators\"), ns.em(\"indicators\", props.direction)];\n\n      if (hasLabel.value) {\n        classes.push(ns.em(\"indicators\", \"labels\"));\n      }\n\n      if (props.indicatorPosition === \"outside\" || props.type === \"card\") {\n        classes.push(ns.em(\"indicators\", \"outside\"));\n      }\n\n      return classes;\n    });\n    const throttledArrowClick = throttle(index => {\n      setActiveItem(index);\n    }, 300, {\n      trailing: true\n    });\n    const throttledIndicatorHover = throttle(index => {\n      handleIndicatorHover(index);\n    }, 300);\n\n    function pauseTimer() {\n      if (data.timer) {\n        clearInterval(data.timer);\n        data.timer = null;\n      }\n    }\n\n    function startTimer() {\n      if (props.interval <= 0 || !props.autoplay || data.timer) return;\n      data.timer = setInterval(() => playSlides(), props.interval);\n    }\n\n    const playSlides = () => {\n      if (data.activeIndex < items.value.length - 1) {\n        data.activeIndex = data.activeIndex + 1;\n      } else if (props.loop) {\n        data.activeIndex = 0;\n      }\n    };\n\n    function setActiveItem(index) {\n      if (typeof index === \"string\") {\n        const filteredItems = items.value.filter(item => item.name === index);\n\n        if (filteredItems.length > 0) {\n          index = items.value.indexOf(filteredItems[0]);\n        }\n      }\n\n      index = Number(index);\n\n      if (isNaN(index) || index !== Math.floor(index)) {\n        debugWarn(\"Carousel\", \"index must be an integer.\");\n        return;\n      }\n\n      const length = items.value.length;\n      const oldIndex = data.activeIndex;\n\n      if (index < 0) {\n        data.activeIndex = props.loop ? length - 1 : 0;\n      } else if (index >= length) {\n        data.activeIndex = props.loop ? 0 : length - 1;\n      } else {\n        data.activeIndex = index;\n      }\n\n      if (oldIndex === data.activeIndex) {\n        resetItemPosition(oldIndex);\n      }\n    }\n\n    function resetItemPosition(oldIndex) {\n      items.value.forEach((item, index) => {\n        item.translateItem(index, data.activeIndex, oldIndex);\n      });\n    }\n\n    function addItem(item) {\n      items.value.push(item);\n    }\n\n    function removeItem(uid) {\n      const index = items.value.findIndex(item => item.uid === uid);\n\n      if (index !== -1) {\n        items.value.splice(index, 1);\n        if (data.activeIndex === index) next();\n      }\n    }\n\n    function itemInStage(item, index) {\n      const length = items.value.length;\n\n      if (index === length - 1 && item.inStage && items.value[0].active || item.inStage && items.value[index + 1] && items.value[index + 1].active) {\n        return \"left\";\n      } else if (index === 0 && item.inStage && items.value[length - 1].active || item.inStage && items.value[index - 1] && items.value[index - 1].active) {\n        return \"right\";\n      }\n\n      return false;\n    }\n\n    function handleMouseEnter() {\n      data.hover = true;\n\n      if (props.pauseOnHover) {\n        pauseTimer();\n      }\n    }\n\n    function handleMouseLeave() {\n      data.hover = false;\n      startTimer();\n    }\n\n    function handleButtonEnter(arrow) {\n      if (props.direction === \"vertical\") return;\n      items.value.forEach((item, index) => {\n        if (arrow === itemInStage(item, index)) {\n          item.hover = true;\n        }\n      });\n    }\n\n    function handleButtonLeave() {\n      if (props.direction === \"vertical\") return;\n      items.value.forEach(item => {\n        item.hover = false;\n      });\n    }\n\n    function handleIndicatorClick(index) {\n      data.activeIndex = index;\n    }\n\n    function handleIndicatorHover(index) {\n      if (props.trigger === \"hover\" && index !== data.activeIndex) {\n        data.activeIndex = index;\n      }\n    }\n\n    function prev() {\n      setActiveItem(data.activeIndex - 1);\n    }\n\n    function next() {\n      setActiveItem(data.activeIndex + 1);\n    }\n\n    watch(() => data.activeIndex, (current, prev2) => {\n      resetItemPosition(prev2);\n\n      if (prev2 > -1) {\n        emit(\"change\", current, prev2);\n      }\n    });\n    watch(() => props.autoplay, current => {\n      current ? startTimer() : pauseTimer();\n    });\n    watch(() => props.loop, () => {\n      setActiveItem(data.activeIndex);\n    });\n    onMounted(() => {\n      nextTick(() => {\n        addResizeListener(root.value, resetItemPosition);\n\n        if (props.initialIndex < items.value.length && props.initialIndex >= 0) {\n          data.activeIndex = props.initialIndex;\n        }\n\n        startTimer();\n      });\n    });\n    onBeforeUnmount(() => {\n      if (root.value) removeResizeListener(root.value, resetItemPosition);\n      pauseTimer();\n    });\n    provide(\"injectCarouselScope\", {\n      root,\n      direction: props.direction,\n      type: props.type,\n      items,\n      loop: props.loop,\n      addItem,\n      removeItem,\n      setActiveItem\n    });\n    return {\n      data,\n      props,\n      items,\n      arrowDisplay,\n      carouselClasses,\n      indicatorsClasses,\n      hasLabel,\n      handleMouseEnter,\n      handleMouseLeave,\n      handleIndicatorClick,\n      throttledArrowClick,\n      throttledIndicatorHover,\n      handleButtonEnter,\n      handleButtonLeave,\n      prev,\n      next,\n      setActiveItem,\n      root,\n      ns\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"onMouseenter\", \"onClick\"];\nconst _hoisted_2 = {\n  key: 0\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_arrow_left = resolveComponent(\"arrow-left\");\n\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_arrow_right = resolveComponent(\"arrow-right\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"root\",\n    class: normalizeClass(_ctx.carouselClasses),\n    onMouseenter: _cache[6] || (_cache[6] = withModifiers((...args) => _ctx.handleMouseEnter && _ctx.handleMouseEnter(...args), [\"stop\"])),\n    onMouseleave: _cache[7] || (_cache[7] = withModifiers((...args) => _ctx.handleMouseLeave && _ctx.handleMouseLeave(...args), [\"stop\"]))\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"container\")),\n    style: normalizeStyle({\n      height: _ctx.height\n    })\n  }, [_ctx.arrowDisplay ? (openBlock(), createBlock(Transition, {\n    key: 0,\n    name: \"carousel-arrow-left\"\n  }, {\n    default: withCtx(() => [withDirectives(createElementVNode(\"button\", {\n      type: \"button\",\n      class: normalizeClass([_ctx.ns.e(\"arrow\"), _ctx.ns.em(\"arrow\", \"left\")]),\n      onMouseenter: _cache[0] || (_cache[0] = $event => _ctx.handleButtonEnter(\"left\")),\n      onMouseleave: _cache[1] || (_cache[1] = (...args) => _ctx.handleButtonLeave && _ctx.handleButtonLeave(...args)),\n      onClick: _cache[2] || (_cache[2] = withModifiers($event => _ctx.throttledArrowClick(_ctx.data.activeIndex - 1), [\"stop\"]))\n    }, [createVNode(_component_el_icon, null, {\n      default: withCtx(() => [createVNode(_component_arrow_left)]),\n      _: 1\n    })], 34), [[vShow, (_ctx.arrow === \"always\" || _ctx.data.hover) && (_ctx.props.loop || _ctx.data.activeIndex > 0)]])]),\n    _: 1\n  })) : createCommentVNode(\"v-if\", true), _ctx.arrowDisplay ? (openBlock(), createBlock(Transition, {\n    key: 1,\n    name: \"carousel-arrow-right\"\n  }, {\n    default: withCtx(() => [withDirectives(createElementVNode(\"button\", {\n      type: \"button\",\n      class: normalizeClass([_ctx.ns.e(\"arrow\"), _ctx.ns.em(\"arrow\", \"right\")]),\n      onMouseenter: _cache[3] || (_cache[3] = $event => _ctx.handleButtonEnter(\"right\")),\n      onMouseleave: _cache[4] || (_cache[4] = (...args) => _ctx.handleButtonLeave && _ctx.handleButtonLeave(...args)),\n      onClick: _cache[5] || (_cache[5] = withModifiers($event => _ctx.throttledArrowClick(_ctx.data.activeIndex + 1), [\"stop\"]))\n    }, [createVNode(_component_el_icon, null, {\n      default: withCtx(() => [createVNode(_component_arrow_right)]),\n      _: 1\n    })], 34), [[vShow, (_ctx.arrow === \"always\" || _ctx.data.hover) && (_ctx.props.loop || _ctx.data.activeIndex < _ctx.items.length - 1)]])]),\n    _: 1\n  })) : createCommentVNode(\"v-if\", true), renderSlot(_ctx.$slots, \"default\")], 6), _ctx.indicatorPosition !== \"none\" ? (openBlock(), createElementBlock(\"ul\", {\n    key: 0,\n    class: normalizeClass(_ctx.indicatorsClasses)\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.items, (item, index) => {\n    return openBlock(), createElementBlock(\"li\", {\n      key: index,\n      class: normalizeClass([_ctx.ns.e(\"indicator\"), _ctx.ns.em(\"indicator\", _ctx.direction), _ctx.ns.is(\"active\", index === _ctx.data.activeIndex)]),\n      onMouseenter: $event => _ctx.throttledIndicatorHover(index),\n      onClick: withModifiers($event => _ctx.handleIndicatorClick(index), [\"stop\"])\n    }, [createElementVNode(\"button\", {\n      class: normalizeClass(_ctx.ns.e(\"button\"))\n    }, [_ctx.hasLabel ? (openBlock(), createElementBlock(\"span\", _hoisted_2, toDisplayString(item.label), 1)) : createCommentVNode(\"v-if\", true)], 2)], 42, _hoisted_1);\n  }), 128))], 2)) : createCommentVNode(\"v-if\", true)], 34);\n}\n\nvar Carousel = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { Carousel as default };","map":null,"metadata":{},"sourceType":"module"}