{"ast":null,"code":"import { inject, shallowRef, ref, computed, nextTick } from 'vue';\nimport '../../../constants/index.mjs';\nimport '../../../tokens/index.mjs';\nimport { elFormKey, elFormItemKey } from '../../../tokens/form.mjs';\nimport { UPDATE_MODEL_EVENT, INPUT_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\n\nconst useSlide = (props, initData, emit) => {\n  const elForm = inject(elFormKey, {});\n  const elFormItem = inject(elFormItemKey, {});\n  const slider = shallowRef(null);\n  const firstButton = ref(null);\n  const secondButton = ref(null);\n  const buttonRefs = {\n    firstButton,\n    secondButton\n  };\n  const sliderDisabled = computed(() => {\n    return props.disabled || elForm.disabled || false;\n  });\n  const minValue = computed(() => {\n    return Math.min(initData.firstValue, initData.secondValue);\n  });\n  const maxValue = computed(() => {\n    return Math.max(initData.firstValue, initData.secondValue);\n  });\n  const barSize = computed(() => {\n    return props.range ? `${100 * (maxValue.value - minValue.value) / (props.max - props.min)}%` : `${100 * (initData.firstValue - props.min) / (props.max - props.min)}%`;\n  });\n  const barStart = computed(() => {\n    return props.range ? `${100 * (minValue.value - props.min) / (props.max - props.min)}%` : \"0%\";\n  });\n  const runwayStyle = computed(() => {\n    return props.vertical ? {\n      height: props.height\n    } : {};\n  });\n  const barStyle = computed(() => {\n    return props.vertical ? {\n      height: barSize.value,\n      bottom: barStart.value\n    } : {\n      width: barSize.value,\n      left: barStart.value\n    };\n  });\n\n  const resetSize = () => {\n    if (slider.value) {\n      initData.sliderSize = slider.value[`client${props.vertical ? \"Height\" : \"Width\"}`];\n    }\n  };\n\n  const setPosition = percent => {\n    const targetValue = props.min + percent * (props.max - props.min) / 100;\n\n    if (!props.range) {\n      firstButton.value.setPosition(percent);\n      return;\n    }\n\n    let buttonRefName;\n\n    if (Math.abs(minValue.value - targetValue) < Math.abs(maxValue.value - targetValue)) {\n      buttonRefName = initData.firstValue < initData.secondValue ? \"firstButton\" : \"secondButton\";\n    } else {\n      buttonRefName = initData.firstValue > initData.secondValue ? \"firstButton\" : \"secondButton\";\n    }\n\n    buttonRefs[buttonRefName].value.setPosition(percent);\n  };\n\n  const setFirstValue = firstValue => {\n    initData.firstValue = firstValue;\n\n    _emit(props.range ? [minValue.value, maxValue.value] : firstValue);\n  };\n\n  const setSecondValue = secondValue => {\n    initData.secondValue = secondValue;\n\n    if (props.range) {\n      _emit([minValue.value, maxValue.value]);\n    }\n  };\n\n  const _emit = val => {\n    emit(UPDATE_MODEL_EVENT, val);\n    emit(INPUT_EVENT, val);\n  };\n\n  const emitChange = async () => {\n    await nextTick();\n    emit(CHANGE_EVENT, props.range ? [minValue.value, maxValue.value] : props.modelValue);\n  };\n\n  const onSliderClick = event => {\n    if (sliderDisabled.value || initData.dragging) return;\n    resetSize();\n\n    if (props.vertical) {\n      const sliderOffsetBottom = slider.value.getBoundingClientRect().bottom;\n      setPosition((sliderOffsetBottom - event.clientY) / initData.sliderSize * 100);\n    } else {\n      const sliderOffsetLeft = slider.value.getBoundingClientRect().left;\n      setPosition((event.clientX - sliderOffsetLeft) / initData.sliderSize * 100);\n    }\n\n    emitChange();\n  };\n\n  return {\n    elFormItem,\n    slider,\n    firstButton,\n    secondButton,\n    sliderDisabled,\n    minValue,\n    maxValue,\n    runwayStyle,\n    barStyle,\n    resetSize,\n    setPosition,\n    emitChange,\n    onSliderClick,\n    setFirstValue,\n    setSecondValue\n  };\n};\n\nexport { useSlide };","map":null,"metadata":{},"sourceType":"module"}