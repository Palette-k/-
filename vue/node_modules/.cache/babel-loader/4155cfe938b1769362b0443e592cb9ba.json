{"ast":null,"code":"import { defineComponent, inject, computed, createVNode } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props.mjs';\nimport { mutable } from '../../../utils/typescript.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst colProps = buildProps({\n  tag: {\n    type: String,\n    default: \"div\"\n  },\n  span: {\n    type: Number,\n    default: 24\n  },\n  offset: {\n    type: Number,\n    default: 0\n  },\n  pull: {\n    type: Number,\n    default: 0\n  },\n  push: {\n    type: Number,\n    default: 0\n  },\n  xs: {\n    type: definePropType([Number, Object]),\n    default: () => mutable({})\n  },\n  sm: {\n    type: definePropType([Number, Object]),\n    default: () => mutable({})\n  },\n  md: {\n    type: definePropType([Number, Object]),\n    default: () => mutable({})\n  },\n  lg: {\n    type: definePropType([Number, Object]),\n    default: () => mutable({})\n  },\n  xl: {\n    type: definePropType([Number, Object]),\n    default: () => mutable({})\n  }\n});\nvar Col = defineComponent({\n  name: \"ElCol\",\n  props: colProps,\n\n  setup(props, {\n    slots\n  }) {\n    const {\n      gutter\n    } = inject(\"ElRow\", {\n      gutter: {\n        value: 0\n      }\n    });\n    const ns = useNamespace(\"col\");\n    const style = computed(() => {\n      if (gutter.value) {\n        return {\n          paddingLeft: `${gutter.value / 2}px`,\n          paddingRight: `${gutter.value / 2}px`\n        };\n      }\n\n      return {};\n    });\n    const classes = computed(() => {\n      const classes2 = [];\n      const pos = [\"span\", \"offset\", \"pull\", \"push\"];\n      pos.forEach(prop => {\n        const size = props[prop];\n\n        if (typeof size === \"number\") {\n          if (prop === \"span\") classes2.push(ns.b(`${props[prop]}`));else if (size > 0) classes2.push(ns.b(`${prop}-${props[prop]}`));\n        }\n      });\n      const sizes = [\"xs\", \"sm\", \"md\", \"lg\", \"xl\"];\n      sizes.forEach(size => {\n        if (typeof props[size] === \"number\") {\n          classes2.push(ns.b(`${size}-${props[size]}`));\n        } else if (typeof props[size] === \"object\") {\n          const sizeProps = props[size];\n          Object.keys(sizeProps).forEach(prop => {\n            classes2.push(prop !== \"span\" ? ns.b(`${size}-${prop}-${sizeProps[prop]}`) : ns.b(`${size}-${sizeProps[prop]}`));\n          });\n        }\n      });\n\n      if (gutter.value) {\n        classes2.push(ns.is(\"guttered\"));\n      }\n\n      return classes2;\n    });\n    return () => createVNode(props.tag, {\n      \"class\": [ns.b(), classes.value],\n      \"style\": style.value\n    }, slots);\n  }\n\n});\nexport { colProps, Col as default };","map":null,"metadata":{},"sourceType":"module"}