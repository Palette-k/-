{"ast":null,"code":"import { defineComponent, computed, resolveComponent, openBlock, createElementBlock, mergeProps, Fragment, renderList, renderSlot, createVNode, normalizeClass, createBlock, createCommentVNode, normalizeProps } from 'vue';\nimport '../../../hooks/index.mjs';\nimport SkeletonItem from './skeleton-item2.mjs';\nimport { skeletonProps } from './skeleton.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useThrottleRender } from '../../../hooks/use-throttle-render/index.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElSkeleton\",\n  components: {\n    [SkeletonItem.name]: SkeletonItem\n  },\n  props: skeletonProps,\n\n  setup(props) {\n    const ns = useNamespace(\"skeleton\");\n    const innerLoading = computed(() => {\n      return props.loading;\n    });\n    const uiLoading = useThrottleRender(innerLoading, props.throttle);\n    return {\n      ns,\n      uiLoading\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_skeleton_item = resolveComponent(\"el-skeleton-item\");\n\n  return _ctx.uiLoading ? (openBlock(), createElementBlock(\"div\", mergeProps({\n    key: 0,\n    class: [_ctx.ns.b(), _ctx.ns.is(\"animated\", _ctx.animated)]\n  }, _ctx.$attrs), [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.count, i => {\n    return openBlock(), createElementBlock(Fragment, {\n      key: i\n    }, [_ctx.loading ? renderSlot(_ctx.$slots, \"template\", {\n      key: i\n    }, () => [createVNode(_component_el_skeleton_item, {\n      class: normalizeClass(_ctx.ns.is(\"first\")),\n      variant: \"p\"\n    }, null, 8, [\"class\"]), (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.rows, item => {\n      return openBlock(), createBlock(_component_el_skeleton_item, {\n        key: item,\n        class: normalizeClass([_ctx.ns.e(\"paragraph\"), _ctx.ns.is(\"last\", item === _ctx.rows && _ctx.rows > 1)]),\n        variant: \"p\"\n      }, null, 8, [\"class\"]);\n    }), 128))]) : createCommentVNode(\"v-if\", true)], 64);\n  }), 128))], 16)) : renderSlot(_ctx.$slots, \"default\", normalizeProps(mergeProps({\n    key: 1\n  }, _ctx.$attrs)));\n}\n\nvar Skeleton = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { Skeleton as default };","map":null,"metadata":{},"sourceType":"module"}