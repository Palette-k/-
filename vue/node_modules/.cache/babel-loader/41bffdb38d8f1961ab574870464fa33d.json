{"ast":null,"code":"import { defineComponent, nextTick, openBlock, createElementBlock, normalizeClass, withKeys, withModifiers, createElementVNode, withDirectives, vModelRadio, renderSlot, createTextVNode, toDisplayString } from 'vue';\nimport '../../../hooks/index.mjs';\nimport { radioProps, radioEmits, useRadio } from './radio.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElRadio\",\n  props: radioProps,\n  emits: radioEmits,\n\n  setup(props, {\n    emit\n  }) {\n    const ns = useNamespace(\"radio\");\n    const {\n      radioRef,\n      isGroup,\n      focus,\n      size,\n      disabled,\n      tabIndex,\n      modelValue\n    } = useRadio(props, emit);\n\n    function handleChange() {\n      nextTick(() => emit(\"change\", modelValue.value));\n    }\n\n    return {\n      ns,\n      focus,\n      isGroup,\n      modelValue,\n      tabIndex,\n      size,\n      disabled,\n      radioRef,\n      handleChange\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"aria-checked\", \"aria-disabled\", \"tabindex\"];\nconst _hoisted_2 = [\"value\", \"name\", \"disabled\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"label\", {\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.is(\"disabled\", _ctx.disabled), _ctx.ns.is(\"focus\", _ctx.focus), _ctx.ns.is(\"bordered\", _ctx.border), _ctx.ns.is(\"checked\", _ctx.modelValue === _ctx.label), _ctx.ns.m(_ctx.size)]),\n    role: \"radio\",\n    \"aria-checked\": _ctx.modelValue === _ctx.label,\n    \"aria-disabled\": _ctx.disabled,\n    tabindex: _ctx.tabIndex,\n    onKeydown: _cache[5] || (_cache[5] = withKeys(withModifiers($event => _ctx.modelValue = _ctx.disabled ? _ctx.modelValue : _ctx.label, [\"stop\", \"prevent\"]), [\"space\"]))\n  }, [createElementVNode(\"span\", {\n    class: normalizeClass([_ctx.ns.e(\"input\"), _ctx.ns.is(\"disabled\", _ctx.disabled), _ctx.ns.is(\"checked\", _ctx.modelValue === _ctx.label)])\n  }, [createElementVNode(\"span\", {\n    class: normalizeClass(_ctx.ns.e(\"inner\"))\n  }, null, 2), withDirectives(createElementVNode(\"input\", {\n    ref: \"radioRef\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.modelValue = $event),\n    class: normalizeClass(_ctx.ns.e(\"original\")),\n    value: _ctx.label,\n    type: \"radio\",\n    \"aria-hidden\": \"true\",\n    name: _ctx.name,\n    disabled: _ctx.disabled,\n    tabindex: \"-1\",\n    onFocus: _cache[1] || (_cache[1] = $event => _ctx.focus = true),\n    onBlur: _cache[2] || (_cache[2] = $event => _ctx.focus = false),\n    onChange: _cache[3] || (_cache[3] = (...args) => _ctx.handleChange && _ctx.handleChange(...args))\n  }, null, 42, _hoisted_2), [[vModelRadio, _ctx.modelValue]])], 2), createElementVNode(\"span\", {\n    class: normalizeClass(_ctx.ns.e(\"label\")),\n    onKeydown: _cache[4] || (_cache[4] = withModifiers(() => {}, [\"stop\"]))\n  }, [renderSlot(_ctx.$slots, \"default\", {}, () => [createTextVNode(toDisplayString(_ctx.label), 1)])], 34)], 42, _hoisted_1);\n}\n\nvar Radio = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { Radio as default };","map":null,"metadata":{},"sourceType":"module"}