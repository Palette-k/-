{"ast":null,"code":"import { defineComponent, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle, renderSlot, normalizeProps, guardReactiveProps, toDisplayString, createCommentVNode, createBlock, withCtx, resolveDynamicComponent } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { CircleCheck, CircleClose, Check, Close, WarningFilled } from '@element-plus/icons-vue';\nimport '../../../hooks/index.mjs';\nimport { progressProps } from './progress.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElProgress\",\n  components: {\n    ElIcon,\n    CircleCheck,\n    CircleClose,\n    Check,\n    Close,\n    WarningFilled\n  },\n  props: progressProps,\n\n  setup(props) {\n    const ns = useNamespace(\"progress\");\n    const barStyle = computed(() => ({\n      width: `${props.percentage}%`,\n      animationDuration: `${props.duration}s`,\n      backgroundColor: getCurrentColor(props.percentage)\n    }));\n    const relativeStrokeWidth = computed(() => (props.strokeWidth / props.width * 100).toFixed(1));\n    const radius = computed(() => {\n      if (props.type === \"circle\" || props.type === \"dashboard\") {\n        return parseInt(`${50 - parseFloat(relativeStrokeWidth.value) / 2}`, 10);\n      } else {\n        return 0;\n      }\n    });\n    const trackPath = computed(() => {\n      const r = radius.value;\n      const isDashboard = props.type === \"dashboard\";\n      return `\n          M 50 50\n          m 0 ${isDashboard ? \"\" : \"-\"}${r}\n          a ${r} ${r} 0 1 1 0 ${isDashboard ? \"-\" : \"\"}${r * 2}\n          a ${r} ${r} 0 1 1 0 ${isDashboard ? \"\" : \"-\"}${r * 2}\n          `;\n    });\n    const perimeter = computed(() => 2 * Math.PI * radius.value);\n    const rate = computed(() => props.type === \"dashboard\" ? 0.75 : 1);\n    const strokeDashoffset = computed(() => {\n      const offset = -1 * perimeter.value * (1 - rate.value) / 2;\n      return `${offset}px`;\n    });\n    const trailPathStyle = computed(() => ({\n      strokeDasharray: `${perimeter.value * rate.value}px, ${perimeter.value}px`,\n      strokeDashoffset: strokeDashoffset.value\n    }));\n    const circlePathStyle = computed(() => ({\n      strokeDasharray: `${perimeter.value * rate.value * (props.percentage / 100)}px, ${perimeter.value}px`,\n      strokeDashoffset: strokeDashoffset.value,\n      transition: \"stroke-dasharray 0.6s ease 0s, stroke 0.6s ease\"\n    }));\n    const stroke = computed(() => {\n      let ret;\n\n      if (props.color) {\n        ret = getCurrentColor(props.percentage);\n      } else {\n        switch (props.status) {\n          case \"success\":\n            ret = \"#13ce66\";\n            break;\n\n          case \"exception\":\n            ret = \"#ff4949\";\n            break;\n\n          case \"warning\":\n            ret = \"#e6a23c\";\n            break;\n\n          default:\n            ret = \"#20a0ff\";\n        }\n      }\n\n      return ret;\n    });\n    const statusIcon = computed(() => {\n      if (props.status === \"warning\") {\n        return WarningFilled;\n      }\n\n      if (props.type === \"line\") {\n        return props.status === \"success\" ? CircleCheck : CircleClose;\n      } else {\n        return props.status === \"success\" ? Check : Close;\n      }\n    });\n    const progressTextSize = computed(() => {\n      return props.type === \"line\" ? 12 + props.strokeWidth * 0.4 : props.width * 0.111111 + 2;\n    });\n    const content = computed(() => props.format(props.percentage));\n\n    const getCurrentColor = percentage => {\n      var _a;\n\n      const {\n        color\n      } = props;\n\n      if (typeof color === \"function\") {\n        return color(percentage);\n      } else if (typeof color === \"string\") {\n        return color;\n      } else {\n        const span = 100 / color.length;\n        const seriesColors = color.map((seriesColor, index) => {\n          if (typeof seriesColor === \"string\") {\n            return {\n              color: seriesColor,\n              percentage: (index + 1) * span\n            };\n          }\n\n          return seriesColor;\n        });\n        const colors = seriesColors.sort((a, b) => a.percentage - b.percentage);\n\n        for (const color2 of colors) {\n          if (color2.percentage > percentage) return color2.color;\n        }\n\n        return (_a = colors[colors.length - 1]) == null ? void 0 : _a.color;\n      }\n    };\n\n    const slotData = computed(() => {\n      return {\n        percentage: props.percentage\n      };\n    });\n    return {\n      ns,\n      barStyle,\n      relativeStrokeWidth,\n      radius,\n      trackPath,\n      perimeter,\n      rate,\n      strokeDashoffset,\n      trailPathStyle,\n      circlePathStyle,\n      stroke,\n      statusIcon,\n      progressTextSize,\n      content,\n      slotData\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"aria-valuenow\"];\nconst _hoisted_2 = {\n  viewBox: \"0 0 100 100\"\n};\nconst _hoisted_3 = [\"d\", \"stroke-width\"];\nconst _hoisted_4 = [\"d\", \"stroke\", \"stroke-linecap\", \"stroke-width\"];\nconst _hoisted_5 = {\n  key: 0\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.m(_ctx.type), _ctx.ns.is(_ctx.status), {\n      [_ctx.ns.m(\"without-text\")]: !_ctx.showText,\n      [_ctx.ns.m(\"text-inside\")]: _ctx.textInside\n    }]),\n    role: \"progressbar\",\n    \"aria-valuenow\": _ctx.percentage,\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\"\n  }, [_ctx.type === \"line\" ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.b(\"bar\"))\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.be(\"bar\", \"outer\")),\n    style: normalizeStyle({\n      height: `${_ctx.strokeWidth}px`\n    })\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass([_ctx.ns.be(\"bar\", \"inner\"), {\n      [_ctx.ns.bem(\"bar\", \"inner\", \"indeterminate\")]: _ctx.indeterminate\n    }]),\n    style: normalizeStyle(_ctx.barStyle)\n  }, [(_ctx.showText || _ctx.$slots.default) && _ctx.textInside ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.be(\"bar\", \"innerText\"))\n  }, [renderSlot(_ctx.$slots, \"default\", normalizeProps(guardReactiveProps(_ctx.slotData)), () => [createElementVNode(\"span\", null, toDisplayString(_ctx.content), 1)])], 2)) : createCommentVNode(\"v-if\", true)], 6)], 6)], 2)) : (openBlock(), createElementBlock(\"div\", {\n    key: 1,\n    class: normalizeClass(_ctx.ns.b(\"circle\")),\n    style: normalizeStyle({\n      height: `${_ctx.width}px`,\n      width: `${_ctx.width}px`\n    })\n  }, [(openBlock(), createElementBlock(\"svg\", _hoisted_2, [createElementVNode(\"path\", {\n    class: normalizeClass(_ctx.ns.be(\"circle\", \"track\")),\n    d: _ctx.trackPath,\n    stroke: \"#e5e9f2\",\n    \"stroke-width\": _ctx.relativeStrokeWidth,\n    fill: \"none\",\n    style: normalizeStyle(_ctx.trailPathStyle)\n  }, null, 14, _hoisted_3), createElementVNode(\"path\", {\n    class: normalizeClass(_ctx.ns.be(\"circle\", \"path\")),\n    d: _ctx.trackPath,\n    stroke: _ctx.stroke,\n    fill: \"none\",\n    \"stroke-linecap\": _ctx.strokeLinecap,\n    \"stroke-width\": _ctx.percentage ? _ctx.relativeStrokeWidth : 0,\n    style: normalizeStyle(_ctx.circlePathStyle)\n  }, null, 14, _hoisted_4)]))], 6)), (_ctx.showText || _ctx.$slots.default) && !_ctx.textInside ? (openBlock(), createElementBlock(\"div\", {\n    key: 2,\n    class: normalizeClass(_ctx.ns.e(\"text\")),\n    style: normalizeStyle({\n      fontSize: `${_ctx.progressTextSize}px`\n    })\n  }, [renderSlot(_ctx.$slots, \"default\", normalizeProps(guardReactiveProps(_ctx.slotData)), () => [!_ctx.status ? (openBlock(), createElementBlock(\"span\", _hoisted_5, toDisplayString(_ctx.content), 1)) : (openBlock(), createBlock(_component_el_icon, {\n    key: 1\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.statusIcon)))]),\n    _: 1\n  }))])], 6)) : createCommentVNode(\"v-if\", true)], 10, _hoisted_1);\n}\n\nvar Progress = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { Progress as default };","map":null,"metadata":{},"sourceType":"module"}