{"ast":null,"code":"import { ref, inject, computed, unref } from 'vue';\nimport '../../tokens/index.mjs';\nimport '../../utils/index.mjs';\nimport '../../constants/index.mjs';\nimport { useProp } from '../use-prop/index.mjs';\nimport { useGlobalConfig } from '../use-global-config/index.mjs';\nimport { buildProp } from '../../utils/vue/props.mjs';\nimport { componentSizes } from '../../constants/size.mjs';\nimport { elFormKey, elFormItemKey } from '../../tokens/form.mjs';\nconst useSizeProp = buildProp({\n  type: String,\n  values: componentSizes,\n  required: false\n});\n\nconst useSize = (fallback, ignore = {}) => {\n  const emptyRef = ref(void 0);\n  const size = ignore.prop ? emptyRef : useProp(\"size\");\n  const globalConfig = ignore.global ? emptyRef : useGlobalConfig(\"size\");\n  const form = ignore.form ? {\n    size: void 0\n  } : inject(elFormKey, void 0);\n  const formItem = ignore.formItem ? {\n    size: void 0\n  } : inject(elFormItemKey, void 0);\n  return computed(() => size.value || unref(fallback) || (formItem == null ? void 0 : formItem.size) || (form == null ? void 0 : form.size) || globalConfig.value || \"default\");\n};\n\nconst useDisabled = fallback => {\n  const disabled = useProp(\"disabled\");\n  const form = inject(elFormKey, void 0);\n  return computed(() => disabled.value || unref(fallback) || (form == null ? void 0 : form.disabled) || false);\n};\n\nexport { useDisabled, useSize, useSizeProp };","map":null,"metadata":{},"sourceType":"module"}