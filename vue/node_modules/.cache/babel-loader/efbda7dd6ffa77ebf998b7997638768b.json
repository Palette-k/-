{"ast":null,"code":"import { defineComponent, shallowRef, computed, onBeforeUnmount, provide, toRef, openBlock, createElementBlock, unref, createBlock, createSlots, withCtx, renderSlot, createCommentVNode, createVNode } from 'vue';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport _sfc_main$1 from './upload-list2.mjs';\nimport _sfc_main$2 from './upload-content2.mjs';\nimport { useHandlers } from './use-handlers.mjs';\nimport { uploadProps } from './upload.mjs';\nimport { useDisabled } from '../../../hooks/use-common-props/index.mjs';\nimport { uploadContextKey } from '../../../tokens/upload.mjs';\nconst __default__ = {\n  name: \"ElUpload\"\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: uploadProps,\n\n  setup(__props, {\n    expose\n  }) {\n    const props = __props;\n    const disabled = useDisabled();\n    const uploadRef = shallowRef();\n    const {\n      abort,\n      submit,\n      clearFiles,\n      uploadFiles,\n      handleStart,\n      handleError,\n      handleRemove,\n      handleSuccess,\n      handleProgress\n    } = useHandlers(props, uploadRef);\n    const isPictureCard = computed(() => props.listType === \"picture-card\");\n    onBeforeUnmount(() => {\n      uploadFiles.value.forEach(({\n        url\n      }) => {\n        if (url == null ? void 0 : url.startsWith(\"blob:\")) URL.revokeObjectURL(url);\n      });\n    });\n    provide(uploadContextKey, {\n      accept: toRef(props, \"accept\")\n    });\n    expose({\n      abort,\n      submit,\n      clearFiles,\n      handleStart,\n      handleRemove\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", null, [unref(isPictureCard) && _ctx.showFileList ? (openBlock(), createBlock(_sfc_main$1, {\n        key: 0,\n        disabled: unref(disabled),\n        \"list-type\": _ctx.listType,\n        files: unref(uploadFiles),\n        \"handle-preview\": _ctx.onPreview,\n        onRemove: unref(handleRemove)\n      }, createSlots({\n        _: 2\n      }, [_ctx.$slots.file ? {\n        name: \"default\",\n        fn: withCtx(({\n          file\n        }) => [renderSlot(_ctx.$slots, \"file\", {\n          file\n        })])\n      } : void 0]), 1032, [\"disabled\", \"list-type\", \"files\", \"handle-preview\", \"onRemove\"])) : createCommentVNode(\"v-if\", true), createVNode(_sfc_main$2, {\n        ref_key: \"uploadRef\",\n        ref: uploadRef,\n        type: _ctx.type,\n        drag: _ctx.drag,\n        action: _ctx.action,\n        multiple: _ctx.multiple,\n        \"with-credentials\": _ctx.withCredentials,\n        headers: _ctx.headers,\n        method: _ctx.method,\n        name: _ctx.name,\n        data: _ctx.data,\n        accept: _ctx.accept,\n        \"file-list\": unref(uploadFiles),\n        \"auto-upload\": _ctx.autoUpload,\n        \"list-type\": _ctx.listType,\n        disabled: unref(disabled),\n        limit: _ctx.limit,\n        \"http-request\": _ctx.httpRequest,\n        \"before-upload\": _ctx.beforeUpload,\n        \"on-exceed\": _ctx.onExceed,\n        \"on-start\": unref(handleStart),\n        \"on-progress\": unref(handleProgress),\n        \"on-success\": unref(handleSuccess),\n        \"on-error\": unref(handleError),\n        \"on-remove\": unref(handleRemove)\n      }, {\n        default: withCtx(() => [_ctx.$slots.trigger ? renderSlot(_ctx.$slots, \"trigger\", {\n          key: 0\n        }) : createCommentVNode(\"v-if\", true), !_ctx.$slots.trigger && _ctx.$slots.default ? renderSlot(_ctx.$slots, \"default\", {\n          key: 1\n        }) : createCommentVNode(\"v-if\", true)]),\n        _: 3\n      }, 8, [\"type\", \"drag\", \"action\", \"multiple\", \"with-credentials\", \"headers\", \"method\", \"name\", \"data\", \"accept\", \"file-list\", \"auto-upload\", \"list-type\", \"disabled\", \"limit\", \"http-request\", \"before-upload\", \"on-exceed\", \"on-start\", \"on-progress\", \"on-success\", \"on-error\", \"on-remove\"]), _ctx.$slots.trigger ? renderSlot(_ctx.$slots, \"default\", {\n        key: 1\n      }) : createCommentVNode(\"v-if\", true), renderSlot(_ctx.$slots, \"tip\"), !unref(isPictureCard) && _ctx.showFileList ? (openBlock(), createBlock(_sfc_main$1, {\n        key: 2,\n        disabled: unref(disabled),\n        \"list-type\": _ctx.listType,\n        files: unref(uploadFiles),\n        \"handle-preview\": _ctx.onPreview,\n        onRemove: unref(handleRemove)\n      }, createSlots({\n        _: 2\n      }, [_ctx.$slots.file ? {\n        name: \"default\",\n        fn: withCtx(({\n          file\n        }) => [renderSlot(_ctx.$slots, \"file\", {\n          file\n        })])\n      } : void 0]), 1032, [\"disabled\", \"list-type\", \"files\", \"handle-preview\", \"onRemove\"])) : createCommentVNode(\"v-if\", true)]);\n    };\n  }\n\n});\n\nexport { _sfc_main as default };","map":null,"metadata":{},"sourceType":"module"}