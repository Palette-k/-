{"ast":null,"code":"import { defineComponent, reactive, computed, toRefs, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, createVNode, withCtx, createTextVNode, toDisplayString, createBlock, createCommentVNode, withDirectives, Fragment, renderList, vShow, renderSlot } from 'vue';\nimport '../../../hooks/index.mjs';\nimport { ElCheckboxGroup, ElCheckbox } from '../../checkbox/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport { Search } from '@element-plus/icons-vue';\nimport { useCheckProps, CHECKED_CHANGE_EVENT, useCheck } from './useCheck.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElTransferPanel\",\n  components: {\n    ElCheckboxGroup,\n    ElCheckbox,\n    ElInput,\n    OptionContent: ({\n      option\n    }) => option\n  },\n  props: useCheckProps,\n  emits: [CHECKED_CHANGE_EVENT],\n\n  setup(props, {\n    slots\n  }) {\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"transfer\");\n    const panelState = reactive({\n      checked: [],\n      allChecked: false,\n      query: \"\",\n      inputHover: false,\n      checkChangeByUser: true\n    });\n    const {\n      labelProp,\n      keyProp,\n      disabledProp,\n      filteredData,\n      checkedSummary,\n      isIndeterminate,\n      handleAllCheckedChange\n    } = useCheck(props, panelState);\n    const hasNoMatch = computed(() => {\n      return panelState.query.length > 0 && filteredData.value.length === 0;\n    });\n    const hasFooter = computed(() => !!slots.default()[0].children.length);\n    const {\n      checked,\n      allChecked,\n      query,\n      inputHover,\n      checkChangeByUser\n    } = toRefs(panelState);\n    return {\n      ns,\n      labelProp,\n      keyProp,\n      disabledProp,\n      filteredData,\n      checkedSummary,\n      isIndeterminate,\n      handleAllCheckedChange,\n      checked,\n      allChecked,\n      query,\n      inputHover,\n      checkChangeByUser,\n      hasNoMatch,\n      SearchIcon: Search,\n      hasFooter,\n      t\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_checkbox = resolveComponent(\"el-checkbox\");\n\n  const _component_el_input = resolveComponent(\"el-input\");\n\n  const _component_option_content = resolveComponent(\"option-content\");\n\n  const _component_el_checkbox_group = resolveComponent(\"el-checkbox-group\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.ns.b(\"panel\"))\n  }, [createElementVNode(\"p\", {\n    class: normalizeClass(_ctx.ns.be(\"panel\", \"header\"))\n  }, [createVNode(_component_el_checkbox, {\n    modelValue: _ctx.allChecked,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.allChecked = $event),\n    indeterminate: _ctx.isIndeterminate,\n    onChange: _ctx.handleAllCheckedChange\n  }, {\n    default: withCtx(() => [createTextVNode(toDisplayString(_ctx.title) + \" \", 1), createElementVNode(\"span\", null, toDisplayString(_ctx.checkedSummary), 1)]),\n    _: 1\n  }, 8, [\"modelValue\", \"indeterminate\", \"onChange\"])], 2), createElementVNode(\"div\", {\n    class: normalizeClass([_ctx.ns.be(\"panel\", \"body\"), _ctx.ns.is(\"with-footer\", _ctx.hasFooter)])\n  }, [_ctx.filterable ? (openBlock(), createBlock(_component_el_input, {\n    key: 0,\n    modelValue: _ctx.query,\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.query = $event),\n    class: normalizeClass(_ctx.ns.be(\"panel\", \"filter\")),\n    size: \"default\",\n    placeholder: _ctx.placeholder,\n    \"prefix-icon\": _ctx.SearchIcon,\n    clearable: \"\",\n    onMouseenter: _cache[2] || (_cache[2] = $event => _ctx.inputHover = true),\n    onMouseleave: _cache[3] || (_cache[3] = $event => _ctx.inputHover = false)\n  }, null, 8, [\"modelValue\", \"class\", \"placeholder\", \"prefix-icon\"])) : createCommentVNode(\"v-if\", true), withDirectives(createVNode(_component_el_checkbox_group, {\n    modelValue: _ctx.checked,\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => _ctx.checked = $event),\n    class: normalizeClass([_ctx.ns.is(\"filterable\", _ctx.filterable), _ctx.ns.be(\"panel\", \"list\")])\n  }, {\n    default: withCtx(() => [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.filteredData, item => {\n      return openBlock(), createBlock(_component_el_checkbox, {\n        key: item[_ctx.keyProp],\n        class: normalizeClass(_ctx.ns.be(\"panel\", \"item\")),\n        label: item[_ctx.keyProp],\n        disabled: item[_ctx.disabledProp]\n      }, {\n        default: withCtx(() => [createVNode(_component_option_content, {\n          option: _ctx.optionRender(item)\n        }, null, 8, [\"option\"])]),\n        _: 2\n      }, 1032, [\"class\", \"label\", \"disabled\"]);\n    }), 128))]),\n    _: 1\n  }, 8, [\"modelValue\", \"class\"]), [[vShow, !_ctx.hasNoMatch && _ctx.data.length > 0]]), withDirectives(createElementVNode(\"p\", {\n    class: normalizeClass(_ctx.ns.be(\"panel\", \"empty\"))\n  }, toDisplayString(_ctx.hasNoMatch ? _ctx.t(\"el.transfer.noMatch\") : _ctx.t(\"el.transfer.noData\")), 3), [[vShow, _ctx.hasNoMatch || _ctx.data.length === 0]])], 2), _ctx.hasFooter ? (openBlock(), createElementBlock(\"p\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.be(\"panel\", \"footer\"))\n  }, [renderSlot(_ctx.$slots, \"default\")], 2)) : createCommentVNode(\"v-if\", true)], 2);\n}\n\nvar TransferPanel = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { TransferPanel as default };","map":null,"metadata":{},"sourceType":"module"}