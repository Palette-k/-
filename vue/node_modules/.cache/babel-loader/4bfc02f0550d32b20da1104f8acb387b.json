{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { computed, unref, watch, ref, customRef, isVue3, isRef, effectScope, getCurrentScope, onScopeDispose, shallowRef, watchEffect, readonly, reactive, toRefs as toRefs$1, toRef, isVue2, set as set$1, getCurrentInstance, onBeforeUnmount, onMounted, nextTick, onUnmounted } from 'vue-demi';\n\nfunction and(...args) {\n  return computed(() => args.every(i => unref(i)));\n}\n\nfunction biSyncRef(a, b) {\n  const flush = \"sync\";\n  const stop1 = watch(a, newValue => {\n    b.value = newValue;\n  }, {\n    flush,\n    immediate: true\n  });\n  const stop2 = watch(b, newValue => {\n    a.value = newValue;\n  }, {\n    flush,\n    immediate: true\n  });\n  return () => {\n    stop1();\n    stop2();\n  };\n}\n\nfunction controlledComputed(source, fn) {\n  let v = void 0;\n  let track;\n  let trigger;\n  const dirty = ref(true);\n  watch(source, () => {\n    dirty.value = true;\n    trigger();\n  }, {\n    flush: \"sync\"\n  });\n  return customRef((_track, _trigger) => {\n    track = _track;\n    trigger = _trigger;\n    return {\n      get() {\n        if (dirty.value) {\n          v = fn();\n          dirty.value = false;\n        }\n\n        track();\n        return v;\n      },\n\n      set() {}\n\n    };\n  });\n}\n\nfunction __onlyVue3(name = \"this function\") {\n  if (isVue3) return;\n  throw new Error(`[VueUse] ${name} is only works on Vue 3.`);\n}\n\nfunction extendRef(ref, extend, {\n  enumerable = false,\n  unwrap = true\n} = {}) {\n  __onlyVue3();\n\n  for (const [key, value] of Object.entries(extend)) {\n    if (key === \"value\") continue;\n\n    if (isRef(value) && unwrap) {\n      Object.defineProperty(ref, key, {\n        get() {\n          return value.value;\n        },\n\n        set(v) {\n          value.value = v;\n        },\n\n        enumerable\n      });\n    } else {\n      Object.defineProperty(ref, key, {\n        value,\n        enumerable\n      });\n    }\n  }\n\n  return ref;\n}\n\nfunction controlledRef(initial, options = {}) {\n  let source = initial;\n  let track;\n  let trigger;\n  const ref = customRef((_track, _trigger) => {\n    track = _track;\n    trigger = _trigger;\n    return {\n      get() {\n        return get();\n      },\n\n      set(v) {\n        set(v);\n      }\n\n    };\n  });\n\n  function get(tracking = true) {\n    if (tracking) track();\n    return source;\n  }\n\n  function set(value, triggering = true) {\n    var _a, _b;\n\n    if (value === source) return;\n    const old = source;\n    if (((_a = options.onBeforeChange) == null ? void 0 : _a.call(options, value, old)) === false) return;\n    source = value;\n    (_b = options.onChanged) == null ? void 0 : _b.call(options, value, old);\n    if (triggering) trigger();\n  }\n\n  const untrackedGet = () => get(false);\n\n  const silentSet = v => set(v, false);\n\n  const peek = () => get(false);\n\n  const lay = v => set(v, false);\n\n  return extendRef(ref, {\n    get,\n    set,\n    untrackedGet,\n    silentSet,\n    peek,\n    lay\n  }, {\n    enumerable: true\n  });\n}\n\nfunction createEventHook() {\n  const fns = [];\n\n  const off = fn => {\n    const index = fns.indexOf(fn);\n    if (index !== -1) fns.splice(index, 1);\n  };\n\n  const on = fn => {\n    fns.push(fn);\n    return {\n      off: () => off(fn)\n    };\n  };\n\n  const trigger = param => {\n    fns.forEach(fn => fn(param));\n  };\n\n  return {\n    on,\n    off,\n    trigger\n  };\n}\n\nfunction createGlobalState(stateFactory) {\n  let initialized = false;\n  let state;\n  const scope = effectScope(true);\n  return () => {\n    if (!initialized) {\n      state = scope.run(stateFactory);\n      initialized = true;\n    }\n\n    return state;\n  };\n}\n\nfunction reactify(fn) {\n  return function (...args) {\n    return computed(() => fn.apply(this, args.map(i => unref(i))));\n  };\n}\n\nfunction tryOnScopeDispose(fn) {\n  if (getCurrentScope()) {\n    onScopeDispose(fn);\n    return true;\n  }\n\n  return false;\n}\n\nfunction createSharedComposable(composable) {\n  let subscribers = 0;\n  let state;\n  let scope;\n\n  const dispose = () => {\n    subscribers -= 1;\n\n    if (scope && subscribers <= 0) {\n      scope.stop();\n      state = void 0;\n      scope = void 0;\n    }\n  };\n\n  return (...args) => {\n    subscribers += 1;\n\n    if (!state) {\n      scope = effectScope(true);\n      state = scope.run(() => composable(...args));\n    }\n\n    tryOnScopeDispose(dispose);\n    return state;\n  };\n}\n\nconst isClient = typeof window !== \"undefined\";\n\nconst isDef = val => typeof val !== \"undefined\";\n\nconst assert = (condition, ...infos) => {\n  if (!condition) console.warn(...infos);\n};\n\nconst toString = Object.prototype.toString;\n\nconst isBoolean = val => typeof val === \"boolean\";\n\nconst isFunction = val => typeof val === \"function\";\n\nconst isNumber = val => typeof val === \"number\";\n\nconst isString = val => typeof val === \"string\";\n\nconst isObject = val => toString.call(val) === \"[object Object]\";\n\nconst isWindow = val => typeof window !== \"undefined\" && toString.call(val) === \"[object Window]\";\n\nconst now = () => Date.now();\n\nconst timestamp = () => +Date.now();\n\nconst clamp = (n, min, max) => Math.min(max, Math.max(min, n));\n\nconst noop = () => {};\n\nconst rand = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nfunction createFilterWrapper(filter, fn) {\n  function wrapper(...args) {\n    filter(() => fn.apply(this, args), {\n      fn,\n      thisArg: this,\n      args\n    });\n  }\n\n  return wrapper;\n}\n\nconst bypassFilter = invoke => {\n  return invoke();\n};\n\nfunction debounceFilter(ms, options = {}) {\n  let timer;\n  let maxTimer;\n\n  const filter = invoke => {\n    const duration = unref(ms);\n    const maxDuration = unref(options.maxWait);\n    if (timer) clearTimeout(timer);\n\n    if (duration <= 0 || maxDuration !== void 0 && maxDuration <= 0) {\n      if (maxTimer) {\n        clearTimeout(maxTimer);\n        maxTimer = null;\n      }\n\n      return invoke();\n    }\n\n    if (maxDuration && !maxTimer) {\n      maxTimer = setTimeout(() => {\n        if (timer) clearTimeout(timer);\n        maxTimer = null;\n        invoke();\n      }, maxDuration);\n    }\n\n    timer = setTimeout(() => {\n      if (maxTimer) clearTimeout(maxTimer);\n      maxTimer = null;\n      invoke();\n    }, duration);\n  };\n\n  return filter;\n}\n\nfunction throttleFilter(ms, trailing = true, leading = true) {\n  let lastExec = 0;\n  let timer;\n  let preventLeading = !leading;\n\n  const clear = () => {\n    if (timer) {\n      clearTimeout(timer);\n      timer = void 0;\n    }\n  };\n\n  const filter = invoke => {\n    const duration = unref(ms);\n    const elapsed = Date.now() - lastExec;\n    clear();\n\n    if (duration <= 0) {\n      lastExec = Date.now();\n      return invoke();\n    }\n\n    if (elapsed > duration) {\n      lastExec = Date.now();\n      if (preventLeading) preventLeading = false;else invoke();\n    }\n\n    if (trailing) {\n      timer = setTimeout(() => {\n        lastExec = Date.now();\n        if (!leading) preventLeading = true;\n        clear();\n        invoke();\n      }, duration);\n    }\n\n    if (!leading && !timer) timer = setTimeout(() => preventLeading = true, duration);\n  };\n\n  return filter;\n}\n\nfunction pausableFilter(extendFilter = bypassFilter) {\n  const isActive = ref(true);\n\n  function pause() {\n    isActive.value = false;\n  }\n\n  function resume() {\n    isActive.value = true;\n  }\n\n  const eventFilter = (...args) => {\n    if (isActive.value) extendFilter(...args);\n  };\n\n  return {\n    isActive,\n    pause,\n    resume,\n    eventFilter\n  };\n}\n\nfunction promiseTimeout(ms, throwOnTimeout = false, reason = \"Timeout\") {\n  return new Promise((resolve, reject) => {\n    if (throwOnTimeout) setTimeout(() => reject(reason), ms);else setTimeout(resolve, ms);\n  });\n}\n\nfunction identity(arg) {\n  return arg;\n}\n\nfunction createSingletonPromise(fn) {\n  let _promise;\n\n  function wrapper() {\n    if (!_promise) _promise = fn();\n    return _promise;\n  }\n\n  wrapper.reset = async () => {\n    const _prev = _promise;\n    _promise = void 0;\n    if (_prev) await _prev;\n  };\n\n  return wrapper;\n}\n\nfunction invoke(fn) {\n  return fn();\n}\n\nfunction containsProp(obj, ...props) {\n  return props.some(k => k in obj);\n}\n\nfunction increaseWithUnit(target, delta) {\n  var _a;\n\n  if (typeof target === \"number\") return target + delta;\n  const value = ((_a = target.match(/^-?[0-9]+\\.?[0-9]*/)) == null ? void 0 : _a[0]) || \"\";\n  const unit = target.slice(value.length);\n  const result = parseFloat(value) + delta;\n  if (Number.isNaN(result)) return target;\n  return result + unit;\n}\n\nfunction objectPick(obj, keys, omitUndefined = false) {\n  return keys.reduce((n, k) => {\n    if (k in obj) {\n      if (!omitUndefined || !obj[k] === void 0) n[k] = obj[k];\n    }\n\n    return n;\n  }, {});\n}\n\nfunction useDebounceFn(fn, ms = 200, options = {}) {\n  return createFilterWrapper(debounceFilter(ms, options), fn);\n}\n\nfunction useDebounce(value, ms = 200, options = {}) {\n  if (ms <= 0) return value;\n  const debounced = ref(value.value);\n  const updater = useDebounceFn(() => {\n    debounced.value = value.value;\n  }, ms, options);\n  watch(value, () => updater());\n  return debounced;\n}\n\nvar __getOwnPropSymbols$a = Object.getOwnPropertySymbols;\nvar __hasOwnProp$a = Object.prototype.hasOwnProperty;\nvar __propIsEnum$a = Object.prototype.propertyIsEnumerable;\n\nvar __objRest$5 = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp$a.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols$a) for (var prop of __getOwnPropSymbols$a(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum$a.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nfunction watchWithFilter(source, cb, options = {}) {\n  const _a = options,\n        {\n    eventFilter = bypassFilter\n  } = _a,\n        watchOptions = __objRest$5(_a, [\"eventFilter\"]);\n\n  return watch(source, createFilterWrapper(eventFilter, cb), watchOptions);\n}\n\nvar __defProp$8 = Object.defineProperty;\nvar __defProps$5 = Object.defineProperties;\nvar __getOwnPropDescs$5 = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols$9 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$9 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$9 = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp$8 = (obj, key, value) => key in obj ? __defProp$8(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues$8 = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$9.call(b, prop)) __defNormalProp$8(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols$9) for (var prop of __getOwnPropSymbols$9(b)) {\n    if (__propIsEnum$9.call(b, prop)) __defNormalProp$8(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps$5 = (a, b) => __defProps$5(a, __getOwnPropDescs$5(b));\n\nvar __objRest$4 = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp$9.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols$9) for (var prop of __getOwnPropSymbols$9(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum$9.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nfunction debouncedWatch(source, cb, options = {}) {\n  const _a = options,\n        {\n    debounce = 0\n  } = _a,\n        watchOptions = __objRest$4(_a, [\"debounce\"]);\n\n  return watchWithFilter(source, cb, __spreadProps$5(__spreadValues$8({}, watchOptions), {\n    eventFilter: debounceFilter(debounce)\n  }));\n}\n\nvar __defProp$7 = Object.defineProperty;\nvar __defProps$4 = Object.defineProperties;\nvar __getOwnPropDescs$4 = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols$8 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$8 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$8 = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp$7 = (obj, key, value) => key in obj ? __defProp$7(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues$7 = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$8.call(b, prop)) __defNormalProp$7(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols$8) for (var prop of __getOwnPropSymbols$8(b)) {\n    if (__propIsEnum$8.call(b, prop)) __defNormalProp$7(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps$4 = (a, b) => __defProps$4(a, __getOwnPropDescs$4(b));\n\nfunction eagerComputed(fn, options) {\n  var _a;\n\n  const result = shallowRef();\n  watchEffect(() => {\n    result.value = fn();\n  }, __spreadProps$4(__spreadValues$7({}, options), {\n    flush: (_a = options == null ? void 0 : options.flush) != null ? _a : \"sync\"\n  }));\n  return readonly(result);\n}\n\nfunction get(obj, key) {\n  if (key == null) return unref(obj);\n  return unref(obj)[key];\n}\n\nvar __defProp$6 = Object.defineProperty;\nvar __defProps$3 = Object.defineProperties;\nvar __getOwnPropDescs$3 = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols$7 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$7 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$7 = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp$6 = (obj, key, value) => key in obj ? __defProp$6(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues$6 = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$7.call(b, prop)) __defNormalProp$6(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols$7) for (var prop of __getOwnPropSymbols$7(b)) {\n    if (__propIsEnum$7.call(b, prop)) __defNormalProp$6(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps$3 = (a, b) => __defProps$3(a, __getOwnPropDescs$3(b));\n\nvar __objRest$3 = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp$7.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols$7) for (var prop of __getOwnPropSymbols$7(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum$7.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nfunction ignorableWatch(source, cb, options = {}) {\n  const _a = options,\n        {\n    eventFilter = bypassFilter\n  } = _a,\n        watchOptions = __objRest$3(_a, [\"eventFilter\"]);\n\n  const filteredCb = createFilterWrapper(eventFilter, cb);\n  let ignoreUpdates;\n  let ignorePrevAsyncUpdates;\n  let stop;\n\n  if (watchOptions.flush === \"sync\") {\n    const ignore = ref(false);\n\n    ignorePrevAsyncUpdates = () => {};\n\n    ignoreUpdates = updater => {\n      ignore.value = true;\n      updater();\n      ignore.value = false;\n    };\n\n    stop = watch(source, (...args) => {\n      if (!ignore.value) filteredCb(...args);\n    }, watchOptions);\n  } else {\n    const disposables = [];\n    const ignoreCounter = ref(0);\n    const syncCounter = ref(0);\n\n    ignorePrevAsyncUpdates = () => {\n      ignoreCounter.value = syncCounter.value;\n    };\n\n    disposables.push(watch(source, () => {\n      syncCounter.value++;\n    }, __spreadProps$3(__spreadValues$6({}, watchOptions), {\n      flush: \"sync\"\n    })));\n\n    ignoreUpdates = updater => {\n      const syncCounterPrev = syncCounter.value;\n      updater();\n      ignoreCounter.value += syncCounter.value - syncCounterPrev;\n    };\n\n    disposables.push(watch(source, (...args) => {\n      const ignore = ignoreCounter.value > 0 && ignoreCounter.value === syncCounter.value;\n      ignoreCounter.value = 0;\n      syncCounter.value = 0;\n      if (ignore) return;\n      filteredCb(...args);\n    }, watchOptions));\n\n    stop = () => {\n      disposables.forEach(fn => fn());\n    };\n  }\n\n  return {\n    stop,\n    ignoreUpdates,\n    ignorePrevAsyncUpdates\n  };\n}\n\nfunction isDefined(v) {\n  return unref(v) != null;\n}\n\nvar __defProp$5 = Object.defineProperty;\nvar __getOwnPropSymbols$6 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$6 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$6 = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp$5 = (obj, key, value) => key in obj ? __defProp$5(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues$5 = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$6.call(b, prop)) __defNormalProp$5(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols$6) for (var prop of __getOwnPropSymbols$6(b)) {\n    if (__propIsEnum$6.call(b, prop)) __defNormalProp$5(a, prop, b[prop]);\n  }\n  return a;\n};\n\nfunction makeDestructurable(obj, arr) {\n  if (typeof Symbol !== \"undefined\") {\n    const clone = __spreadValues$5({}, obj);\n\n    Object.defineProperty(clone, Symbol.iterator, {\n      enumerable: false,\n\n      value() {\n        let index = 0;\n        return {\n          next: () => ({\n            value: arr[index++],\n            done: index > arr.length\n          })\n        };\n      }\n\n    });\n    return clone;\n  } else {\n    return Object.assign([...arr], obj);\n  }\n}\n\nfunction not(v) {\n  return computed(() => !unref(v));\n}\n\nfunction or(...args) {\n  return computed(() => args.some(i => unref(i)));\n}\n\nvar __defProp$4 = Object.defineProperty;\nvar __defProps$2 = Object.defineProperties;\nvar __getOwnPropDescs$2 = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols$5 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$5 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$5 = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp$4 = (obj, key, value) => key in obj ? __defProp$4(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues$4 = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$5.call(b, prop)) __defNormalProp$4(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols$5) for (var prop of __getOwnPropSymbols$5(b)) {\n    if (__propIsEnum$5.call(b, prop)) __defNormalProp$4(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps$2 = (a, b) => __defProps$2(a, __getOwnPropDescs$2(b));\n\nvar __objRest$2 = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp$5.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols$5) for (var prop of __getOwnPropSymbols$5(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum$5.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nfunction pausableWatch(source, cb, options = {}) {\n  const _a = options,\n        {\n    eventFilter: filter\n  } = _a,\n        watchOptions = __objRest$2(_a, [\"eventFilter\"]);\n\n  const {\n    eventFilter,\n    pause,\n    resume,\n    isActive\n  } = pausableFilter(filter);\n  const stop = watchWithFilter(source, cb, __spreadProps$2(__spreadValues$4({}, watchOptions), {\n    eventFilter\n  }));\n  return {\n    stop,\n    pause,\n    resume,\n    isActive\n  };\n}\n\nfunction reactifyObject(obj, optionsOrKeys = {}) {\n  let keys = [];\n\n  if (Array.isArray(optionsOrKeys)) {\n    keys = optionsOrKeys;\n  } else {\n    const {\n      includeOwnProperties = true\n    } = optionsOrKeys;\n    keys.push(...Object.keys(obj));\n    if (includeOwnProperties) keys.push(...Object.getOwnPropertyNames(obj));\n  }\n\n  return Object.fromEntries(keys.map(key => {\n    const value = obj[key];\n    return [key, typeof value === \"function\" ? reactify(value.bind(obj)) : value];\n  }));\n}\n\nfunction toReactive(objectRef) {\n  if (!isRef(objectRef)) return reactive(objectRef);\n  const proxy = new Proxy({}, {\n    get(_, p, receiver) {\n      return unref(Reflect.get(objectRef.value, p, receiver));\n    },\n\n    set(_, p, value) {\n      if (isRef(objectRef.value[p]) && !isRef(value)) objectRef.value[p].value = value;else objectRef.value[p] = value;\n      return true;\n    },\n\n    deleteProperty(_, p) {\n      return Reflect.deleteProperty(objectRef.value, p);\n    },\n\n    has(_, p) {\n      return Reflect.has(objectRef.value, p);\n    },\n\n    ownKeys() {\n      return Object.keys(objectRef.value);\n    },\n\n    getOwnPropertyDescriptor() {\n      return {\n        enumerable: true,\n        configurable: true\n      };\n    }\n\n  });\n  return reactive(proxy);\n}\n\nfunction reactiveComputed(fn) {\n  return toReactive(computed(fn));\n}\n\nfunction reactiveOmit(obj, ...keys) {\n  return reactiveComputed(() => Object.fromEntries(Object.entries(toRefs$1(obj)).filter(e => !keys.includes(e[0]))));\n}\n\nfunction reactivePick(obj, ...keys) {\n  return reactive(Object.fromEntries(keys.map(k => [k, toRef(obj, k)])));\n}\n\nfunction refDefault(source, defaultValue) {\n  return computed({\n    get() {\n      var _a;\n\n      return (_a = source.value) != null ? _a : defaultValue;\n    },\n\n    set(value) {\n      source.value = value;\n    }\n\n  });\n}\n\nfunction set(...args) {\n  if (args.length === 2) {\n    const [ref, value] = args;\n    ref.value = value;\n  }\n\n  if (args.length === 3) {\n    if (isVue2) {\n      set$1(...args);\n    } else {\n      const [target, key, value] = args;\n      target[key] = value;\n    }\n  }\n}\n\nfunction syncRef(source, targets, {\n  flush = \"sync\",\n  deep = false,\n  immediate = true\n} = {}) {\n  if (!Array.isArray(targets)) targets = [targets];\n  return watch(source, newValue => targets.forEach(target => target.value = newValue), {\n    flush,\n    deep,\n    immediate\n  });\n}\n\nfunction useThrottleFn(fn, ms = 200, trailing = true, leading = true) {\n  return createFilterWrapper(throttleFilter(ms, trailing, leading), fn);\n}\n\nfunction useThrottle(value, delay = 200, trailing = true, leading = true) {\n  if (delay <= 0) return value;\n  const throttled = ref(value.value);\n  const updater = useThrottleFn(() => {\n    throttled.value = value.value;\n  }, delay, trailing, leading);\n  watch(value, () => updater());\n  return throttled;\n}\n\nvar __defProp$3 = Object.defineProperty;\nvar __defProps$1 = Object.defineProperties;\nvar __getOwnPropDescs$1 = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols$4 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$4 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$4 = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp$3 = (obj, key, value) => key in obj ? __defProp$3(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues$3 = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$4.call(b, prop)) __defNormalProp$3(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols$4) for (var prop of __getOwnPropSymbols$4(b)) {\n    if (__propIsEnum$4.call(b, prop)) __defNormalProp$3(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps$1 = (a, b) => __defProps$1(a, __getOwnPropDescs$1(b));\n\nvar __objRest$1 = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp$4.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols$4) for (var prop of __getOwnPropSymbols$4(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum$4.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nfunction throttledWatch(source, cb, options = {}) {\n  const _a = options,\n        {\n    throttle = 0,\n    trailing = true,\n    leading = true\n  } = _a,\n        watchOptions = __objRest$1(_a, [\"throttle\", \"trailing\", \"leading\"]);\n\n  return watchWithFilter(source, cb, __spreadProps$1(__spreadValues$3({}, watchOptions), {\n    eventFilter: throttleFilter(throttle, trailing, leading)\n  }));\n}\n\nvar __defProp$2 = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols$3 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$3 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$3 = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$3.call(b, prop)) __defNormalProp$2(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols$3) for (var prop of __getOwnPropSymbols$3(b)) {\n    if (__propIsEnum$3.call(b, prop)) __defNormalProp$2(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nfunction toRefs(objectRef) {\n  if (!isRef(objectRef)) return toRefs$1(objectRef);\n  const result = Array.isArray(objectRef.value) ? new Array(objectRef.value.length) : {};\n\n  for (const key in objectRef.value) {\n    result[key] = customRef(() => ({\n      get() {\n        return objectRef.value[key];\n      },\n\n      set(v) {\n        if (Array.isArray(objectRef.value)) {\n          const copy = [...objectRef.value];\n          copy[key] = v;\n          objectRef.value = copy;\n        } else {\n          objectRef.value = __spreadProps(__spreadValues$2({}, objectRef.value), {\n            [key]: v\n          });\n        }\n      }\n\n    }));\n  }\n\n  return result;\n}\n\nfunction tryOnBeforeUnmount(fn) {\n  if (getCurrentInstance()) onBeforeUnmount(fn);\n}\n\nfunction tryOnMounted(fn, sync = true) {\n  if (getCurrentInstance()) onMounted(fn);else if (sync) fn();else nextTick(fn);\n}\n\nfunction tryOnUnmounted(fn) {\n  if (getCurrentInstance()) onUnmounted(fn);\n}\n\nfunction until(r) {\n  let isNot = false;\n\n  function toMatch(condition, {\n    flush = \"sync\",\n    deep = false,\n    timeout,\n    throwOnTimeout\n  } = {}) {\n    let stop = null;\n    const watcher = new Promise(resolve => {\n      stop = watch(r, v => {\n        if (condition(v) === !isNot) {\n          stop == null ? void 0 : stop();\n          resolve();\n        }\n      }, {\n        flush,\n        deep,\n        immediate: true\n      });\n    });\n    const promises = [watcher];\n\n    if (timeout) {\n      promises.push(promiseTimeout(timeout, throwOnTimeout).finally(() => {\n        stop == null ? void 0 : stop();\n      }));\n    }\n\n    return Promise.race(promises);\n  }\n\n  function toBe(value, options) {\n    return toMatch(v => v === unref(value), options);\n  }\n\n  function toBeTruthy(options) {\n    return toMatch(v => Boolean(v), options);\n  }\n\n  function toBeNull(options) {\n    return toBe(null, options);\n  }\n\n  function toBeUndefined(options) {\n    return toBe(void 0, options);\n  }\n\n  function toBeNaN(options) {\n    return toMatch(Number.isNaN, options);\n  }\n\n  function toContains(value, options) {\n    return toMatch(v => {\n      const array = Array.from(v);\n      return array.includes(value) || array.includes(unref(value));\n    }, options);\n  }\n\n  function changed(options) {\n    return changedTimes(1, options);\n  }\n\n  function changedTimes(n = 1, options) {\n    let count = -1;\n    return toMatch(() => {\n      count += 1;\n      return count >= n;\n    }, options);\n  }\n\n  if (Array.isArray(unref(r))) {\n    const instance = {\n      toMatch,\n      toContains,\n      changed,\n      changedTimes,\n\n      get not() {\n        isNot = !isNot;\n        return this;\n      }\n\n    };\n    return instance;\n  } else {\n    const instance = {\n      toMatch,\n      toBe,\n      toBeTruthy,\n      toBeNull,\n      toBeNaN,\n      toBeUndefined,\n      changed,\n      changedTimes,\n\n      get not() {\n        isNot = !isNot;\n        return this;\n      }\n\n    };\n    return instance;\n  }\n}\n\nfunction useCounter(initialValue = 0, options = {}) {\n  const count = ref(initialValue);\n  const {\n    max = Infinity,\n    min = -Infinity\n  } = options;\n\n  const inc = (delta = 1) => count.value = Math.min(max, count.value + delta);\n\n  const dec = (delta = 1) => count.value = Math.max(min, count.value - delta);\n\n  const get = () => count.value;\n\n  const set = val => count.value = val;\n\n  const reset = (val = initialValue) => {\n    initialValue = val;\n    return set(val);\n  };\n\n  return {\n    count,\n    inc,\n    dec,\n    get,\n    set,\n    reset\n  };\n}\n\nfunction useIntervalFn(cb, interval = 1e3, options = {}) {\n  const {\n    immediate = true,\n    immediateCallback = false\n  } = options;\n  let timer = null;\n  const isActive = ref(false);\n\n  function clean() {\n    if (timer) {\n      clearInterval(timer);\n      timer = null;\n    }\n  }\n\n  function pause() {\n    isActive.value = false;\n    clean();\n  }\n\n  function resume() {\n    if (interval <= 0) return;\n    isActive.value = true;\n    if (immediateCallback) cb();\n    clean();\n    timer = setInterval(cb, unref(interval));\n  }\n\n  if (immediate && isClient) resume();\n\n  if (isRef(interval)) {\n    const stopWatch = watch(interval, () => {\n      if (immediate && isClient) resume();\n    });\n    tryOnScopeDispose(stopWatch);\n  }\n\n  tryOnScopeDispose(pause);\n  return {\n    isActive,\n    pause,\n    resume\n  };\n}\n\nvar __defProp$1 = Object.defineProperty;\nvar __getOwnPropSymbols$2 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$2 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$2 = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$2.call(b, prop)) __defNormalProp$1(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols$2) for (var prop of __getOwnPropSymbols$2(b)) {\n    if (__propIsEnum$2.call(b, prop)) __defNormalProp$1(a, prop, b[prop]);\n  }\n  return a;\n};\n\nfunction useInterval(interval = 1e3, options = {}) {\n  const {\n    controls: exposeControls = false,\n    immediate = true\n  } = options;\n  const counter = ref(0);\n  const controls = useIntervalFn(() => counter.value += 1, interval, {\n    immediate\n  });\n\n  if (exposeControls) {\n    return __spreadValues$1({\n      counter\n    }, controls);\n  } else {\n    return counter;\n  }\n}\n\nfunction useLastChanged(source, options = {}) {\n  var _a;\n\n  const ms = ref((_a = options.initialValue) != null ? _a : null);\n  watch(source, () => ms.value = timestamp(), options);\n  return ms;\n}\n\nfunction useTimeoutFn(cb, interval, options = {}) {\n  const {\n    immediate = true\n  } = options;\n  const isPending = ref(false);\n  let timer = null;\n\n  function clear() {\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n  }\n\n  function stop() {\n    isPending.value = false;\n    clear();\n  }\n\n  function start(...args) {\n    clear();\n    isPending.value = true;\n    timer = setTimeout(() => {\n      isPending.value = false;\n      timer = null;\n      cb(...args);\n    }, unref(interval));\n  }\n\n  if (immediate) {\n    isPending.value = true;\n    if (isClient) start();\n  }\n\n  tryOnScopeDispose(stop);\n  return {\n    isPending,\n    start,\n    stop\n  };\n}\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$1 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$1 = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp$1.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols$1) for (var prop of __getOwnPropSymbols$1(b)) {\n    if (__propIsEnum$1.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nfunction useTimeout(interval = 1e3, options = {}) {\n  const {\n    controls: exposeControls = false\n  } = options;\n  const controls = useTimeoutFn(noop, interval, options);\n  const ready = computed(() => !controls.isPending.value);\n\n  if (exposeControls) {\n    return __spreadValues({\n      ready\n    }, controls);\n  } else {\n    return ready;\n  }\n}\n\nfunction useToggle(initialValue = false) {\n  if (isRef(initialValue)) {\n    return value => {\n      initialValue.value = typeof value === \"boolean\" ? value : !initialValue.value;\n      return initialValue.value;\n    };\n  } else {\n    const boolean = ref(initialValue);\n\n    const toggle = value => {\n      boolean.value = typeof value === \"boolean\" ? value : !boolean.value;\n      return boolean.value;\n    };\n\n    return [boolean, toggle];\n  }\n}\n\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __objRest = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\n\nfunction watchAtMost(source, cb, options) {\n  const _a = options,\n        {\n    count\n  } = _a,\n        watchOptions = __objRest(_a, [\"count\"]);\n\n  const current = ref(0);\n  const stop = watchWithFilter(source, (...args) => {\n    current.value += 1;\n    if (current.value >= unref(count)) nextTick(() => stop());\n    cb(...args);\n  }, watchOptions);\n  return {\n    count: current,\n    stop\n  };\n}\n\nfunction watchOnce(source, cb, options) {\n  const stop = watch(source, (...args) => {\n    nextTick(() => stop());\n    return cb(...args);\n  }, options);\n}\n\nfunction whenever(source, cb, options) {\n  return watch(source, (v, ov, onInvalidate) => {\n    if (v) cb(v, ov, onInvalidate);\n  }, options);\n}\n\nexport { and, assert, biSyncRef, bypassFilter, clamp, containsProp, controlledComputed, controlledRef, createEventHook, createFilterWrapper, createGlobalState, reactify as createReactiveFn, createSharedComposable, createSingletonPromise, debounceFilter, useDebounce as debouncedRef, debouncedWatch, eagerComputed, extendRef, get, identity, ignorableWatch, increaseWithUnit, invoke, isBoolean, isClient, isDef, isDefined, isFunction, isNumber, isObject, isString, isWindow, makeDestructurable, noop, not, now, objectPick, or, pausableFilter, pausableWatch, promiseTimeout, rand, reactify, reactifyObject, reactiveComputed, reactiveOmit, reactivePick, refDefault, set, syncRef, throttleFilter, useThrottle as throttledRef, throttledWatch, timestamp, toReactive, toRefs, tryOnBeforeUnmount, tryOnMounted, tryOnScopeDispose, tryOnUnmounted, until, useCounter, useDebounce, useDebounceFn, useInterval, useIntervalFn, useLastChanged, useThrottle, useThrottleFn, useTimeout, useTimeoutFn, useToggle, watchAtMost, watchOnce, watchWithFilter, whenever };","map":null,"metadata":{},"sourceType":"module"}