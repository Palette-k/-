{"ast":null,"code":"import { defineComponent, ref, inject, watch, onMounted, unref, onBeforeUnmount, openBlock, createElementBlock, normalizeClass } from 'vue';\nimport '../../../hooks/index.mjs';\nimport { usePopperArrowProps } from './popper.mjs';\nimport { POPPER_CONTENT_INJECTION_KEY } from './tokens.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElPopperArrow\",\n  props: usePopperArrowProps,\n\n  setup(props) {\n    const ns = useNamespace(\"popper\");\n    const arrowRef = ref(null);\n    const popperContentInjection = inject(POPPER_CONTENT_INJECTION_KEY, void 0);\n    watch(() => props.arrowOffset, val => {\n      popperContentInjection.arrowOffset.value = val;\n    });\n    onMounted(() => {\n      popperContentInjection.arrowRef.value = unref(arrowRef);\n    });\n    onBeforeUnmount(() => {\n      popperContentInjection.arrowRef.value = null;\n    });\n    return {\n      ns,\n      arrowRef\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"span\", {\n    ref: \"arrowRef\",\n    class: normalizeClass(_ctx.ns.e(\"arrow\")),\n    \"data-popper-arrow\": \"\"\n  }, null, 2);\n}\n\nvar ElPopperArrow = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { ElPopperArrow as default };","map":null,"metadata":{},"sourceType":"module"}