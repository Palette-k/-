{"ast":null,"code":"import { defineComponent, ref, nextTick, onMounted, provide, reactive, toRefs, watch, openBlock, createElementBlock, normalizeClass, renderSlot } from 'vue';\nimport '../../../constants/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { radioGroupProps, radioGroupEmits } from './radio-group.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useFormItem } from '../../../hooks/use-form-item/index.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { radioGroupKey } from '../../../tokens/radio.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElRadioGroup\",\n  props: radioGroupProps,\n  emits: radioGroupEmits,\n\n  setup(props, ctx) {\n    const ns = useNamespace(\"radio\");\n    const radioGroupRef = ref();\n    const {\n      formItem\n    } = useFormItem();\n\n    const changeEvent = value => {\n      ctx.emit(UPDATE_MODEL_EVENT, value);\n      nextTick(() => ctx.emit(\"change\", value));\n    };\n\n    const handleKeydown = e => {\n      if (!radioGroupRef.value) return;\n      const target = e.target;\n      const className = target.nodeName === \"INPUT\" ? \"[type=radio]\" : \"[role=radio]\";\n      const radios = radioGroupRef.value.querySelectorAll(className);\n      const length = radios.length;\n      const index = Array.from(radios).indexOf(target);\n      const roleRadios = radioGroupRef.value.querySelectorAll(\"[role=radio]\");\n      let nextIndex = null;\n\n      switch (e.code) {\n        case EVENT_CODE.left:\n        case EVENT_CODE.up:\n          e.stopPropagation();\n          e.preventDefault();\n          nextIndex = index === 0 ? length - 1 : index - 1;\n          break;\n\n        case EVENT_CODE.right:\n        case EVENT_CODE.down:\n          e.stopPropagation();\n          e.preventDefault();\n          nextIndex = index === length - 1 ? 0 : index + 1;\n          break;\n\n        default:\n          break;\n      }\n\n      if (nextIndex === null) return;\n      roleRadios[nextIndex].click();\n      roleRadios[nextIndex].focus();\n    };\n\n    onMounted(() => {\n      const radios = radioGroupRef.value.querySelectorAll(\"[type=radio]\");\n      const firstLabel = radios[0];\n\n      if (!Array.from(radios).some(radio => radio.checked) && firstLabel) {\n        firstLabel.tabIndex = 0;\n      }\n    });\n    provide(radioGroupKey, reactive({ ...toRefs(props),\n      changeEvent\n    }));\n    watch(() => props.modelValue, () => formItem == null ? void 0 : formItem.validate(\"change\"));\n    return {\n      ns,\n      radioGroupRef,\n      handleKeydown\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"radioGroupRef\",\n    class: normalizeClass(_ctx.ns.b(\"group\")),\n    role: \"radiogroup\",\n    onKeydown: _cache[0] || (_cache[0] = (...args) => _ctx.handleKeydown && _ctx.handleKeydown(...args))\n  }, [renderSlot(_ctx.$slots, \"default\")], 34);\n}\n\nvar RadioGroup = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { RadioGroup as default };","map":null,"metadata":{},"sourceType":"module"}