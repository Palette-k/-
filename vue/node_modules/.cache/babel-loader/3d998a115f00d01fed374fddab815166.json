{"ast":null,"code":"import { defineComponent, provide, ref, h, renderSlot } from 'vue';\nimport dayjs from 'dayjs';\nimport customParseFormat from 'dayjs/plugin/customParseFormat';\nimport advancedFormat from 'dayjs/plugin/advancedFormat';\nimport localeData from 'dayjs/plugin/localeData';\nimport weekOfYear from 'dayjs/plugin/weekOfYear';\nimport weekYear from 'dayjs/plugin/weekYear';\nimport dayOfYear from 'dayjs/plugin/dayOfYear';\nimport isSameOrAfter from 'dayjs/plugin/isSameOrAfter';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport '../../time-picker/index.mjs';\nimport DatePickPanel from './date-picker-com/panel-date-pick.mjs';\nimport DateRangePickPanel from './date-picker-com/panel-date-range.mjs';\nimport MonthRangePickPanel from './date-picker-com/panel-month-range.mjs';\nimport { ROOT_PICKER_INJECTION_KEY } from './date-picker.type.mjs';\nimport { timePickerDefaultProps } from '../../time-picker/src/common/props.mjs';\nimport { DEFAULT_FORMATS_DATEPICKER, DEFAULT_FORMATS_DATE } from '../../time-picker/src/common/constant.mjs';\nimport CommonPicker from '../../time-picker/src/common/picker.mjs';\ndayjs.extend(localeData);\ndayjs.extend(advancedFormat);\ndayjs.extend(customParseFormat);\ndayjs.extend(weekOfYear);\ndayjs.extend(weekYear);\ndayjs.extend(dayOfYear);\ndayjs.extend(isSameOrAfter);\ndayjs.extend(isSameOrBefore);\n\nconst getPanel = function (type) {\n  if (type === \"daterange\" || type === \"datetimerange\") {\n    return DateRangePickPanel;\n  } else if (type === \"monthrange\") {\n    return MonthRangePickPanel;\n  }\n\n  return DatePickPanel;\n};\n\nvar DatePicker = defineComponent({\n  name: \"ElDatePicker\",\n  install: null,\n  props: { ...timePickerDefaultProps,\n    type: {\n      type: String,\n      default: \"date\"\n    }\n  },\n  emits: [\"update:modelValue\"],\n\n  setup(props, ctx) {\n    provide(\"ElPopperOptions\", props.popperOptions);\n    provide(ROOT_PICKER_INJECTION_KEY, {\n      ctx\n    });\n    const commonPicker = ref(null);\n    const refProps = { ...props,\n      focus: (focusStartInput = true) => {\n        var _a;\n\n        (_a = commonPicker.value) == null ? void 0 : _a.focus(focusStartInput);\n      }\n    };\n    ctx.expose(refProps);\n    return () => {\n      var _a;\n\n      const format = (_a = props.format) != null ? _a : DEFAULT_FORMATS_DATEPICKER[props.type] || DEFAULT_FORMATS_DATE;\n      return h(CommonPicker, { ...props,\n        format,\n        type: props.type,\n        ref: commonPicker,\n        \"onUpdate:modelValue\": value => ctx.emit(\"update:modelValue\", value)\n      }, {\n        default: scopedProps => h(getPanel(props.type), scopedProps),\n        \"range-separator\": () => renderSlot(ctx.slots, \"range-separator\")\n      });\n    };\n  }\n\n});\nexport { DatePicker as default };","map":null,"metadata":{},"sourceType":"module"}