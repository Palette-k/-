{"ast":null,"code":"import { ref, watchEffect, watch, unref, computed, onMounted, nextTick, onBeforeUnmount } from 'vue';\nimport '../../../../utils/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport { parseHeight } from '../util.mjs';\nimport { addResizeListener, removeResizeListener } from '../../../../utils/dom/resize-event.mjs';\nimport { on, off } from '../../../../utils/dom/event.mjs';\nimport { useSize } from '../../../../hooks/use-common-props/index.mjs';\nimport { isString } from '@vue/shared';\nimport { isNumber } from '@vueuse/core';\n\nfunction useStyle(props, layout, store, table) {\n  const isHidden = ref(false);\n  const renderExpanded = ref(null);\n  const resizeProxyVisible = ref(false);\n\n  const setDragVisible = visible => {\n    resizeProxyVisible.value = visible;\n  };\n\n  const resizeState = ref({\n    width: null,\n    height: null\n  });\n  const isGroup = ref(false);\n  const scrollbarViewStyle = {\n    display: \"inline-flex\",\n    flexDirection: \"column\"\n  };\n  watchEffect(() => {\n    layout.setHeight(props.height);\n  });\n  watchEffect(() => {\n    layout.setMaxHeight(props.maxHeight);\n  });\n  watch(() => [props.currentRowKey, store.states.rowKey], ([currentRowKey, rowKey]) => {\n    if (!unref(rowKey)) return;\n    store.setCurrentRowKey(`${currentRowKey}`);\n  }, {\n    immediate: true\n  });\n  watch(() => props.data, data => {\n    table.store.commit(\"setData\", data);\n  }, {\n    immediate: true,\n    deep: true\n  });\n  watchEffect(() => {\n    if (props.expandRowKeys) {\n      store.setExpandRowKeysAdapter(props.expandRowKeys);\n    }\n  });\n\n  const handleMouseLeave = () => {\n    table.store.commit(\"setHoverRow\", null);\n    if (table.hoverState) table.hoverState = null;\n  };\n\n  const handleHeaderFooterMousewheel = (event, data) => {\n    const {\n      pixelX,\n      pixelY\n    } = data;\n\n    if (Math.abs(pixelX) >= Math.abs(pixelY)) {\n      table.refs.bodyWrapper.scrollLeft += data.pixelX / 5;\n    }\n  };\n\n  const shouldUpdateHeight = computed(() => {\n    return props.height || props.maxHeight || store.states.fixedColumns.value.length > 0 || store.states.rightFixedColumns.value.length > 0;\n  });\n  const tableBodyStyles = computed(() => {\n    return {\n      width: layout.bodyWidth.value ? `${layout.bodyWidth.value}px` : \"\"\n    };\n  });\n\n  const doLayout = () => {\n    if (shouldUpdateHeight.value) {\n      layout.updateElsHeight();\n    }\n\n    layout.updateColumnsWidth();\n    requestAnimationFrame(syncPostion);\n  };\n\n  onMounted(async () => {\n    setScrollClass(\"is-scrolling-left\");\n    await nextTick();\n    store.updateColumns();\n    bindEvents();\n    requestAnimationFrame(doLayout);\n    resizeState.value = {\n      width: table.vnode.el.offsetWidth,\n      height: table.vnode.el.offsetHeight\n    };\n    store.states.columns.value.forEach(column => {\n      if (column.filteredValue && column.filteredValue.length) {\n        table.store.commit(\"filterChange\", {\n          column,\n          values: column.filteredValue,\n          silent: true\n        });\n      }\n    });\n    table.$ready = true;\n  });\n\n  const setScrollClassByEl = (el, className) => {\n    if (!el) return;\n    const classList = Array.from(el.classList).filter(item => !item.startsWith(\"is-scrolling-\"));\n    classList.push(layout.scrollX.value ? className : \"is-scrolling-none\");\n    el.className = classList.join(\" \");\n  };\n\n  const setScrollClass = className => {\n    const {\n      tableWrapper\n    } = table.refs;\n    setScrollClassByEl(tableWrapper, className);\n  };\n\n  const syncPostion = function () {\n    if (!layout.scrollX.value || !table.refs.scrollWrapper) return;\n    const scrollContainer = table.refs.scrollWrapper.wrap$;\n    if (!scrollContainer) return;\n    const {\n      scrollLeft,\n      offsetWidth,\n      scrollWidth\n    } = scrollContainer;\n    const {\n      headerWrapper,\n      footerWrapper\n    } = table.refs;\n    if (headerWrapper) headerWrapper.scrollLeft = scrollLeft;\n    if (footerWrapper) footerWrapper.scrollLeft = scrollLeft;\n    const maxScrollLeftPosition = scrollWidth - offsetWidth - 1;\n\n    if (scrollLeft >= maxScrollLeftPosition) {\n      setScrollClass(\"is-scrolling-right\");\n    } else if (scrollLeft === 0) {\n      setScrollClass(\"is-scrolling-left\");\n    } else {\n      setScrollClass(\"is-scrolling-middle\");\n    }\n  };\n\n  const bindEvents = () => {\n    var _a;\n\n    if (!table.refs.scrollWrapper) return;\n    (_a = table.refs.scrollWrapper.wrap$) == null ? void 0 : _a.addEventListener(\"scroll\", syncPostion, {\n      passive: true\n    });\n\n    if (props.fit) {\n      addResizeListener(table.vnode.el, resizeListener);\n    } else {\n      on(window, \"resize\", doLayout);\n    }\n  };\n\n  onBeforeUnmount(() => {\n    unbindEvents();\n  });\n\n  const unbindEvents = () => {\n    var _a;\n\n    (_a = table.refs.scrollWrapper.wrap$) == null ? void 0 : _a.removeEventListener(\"scroll\", syncPostion, true);\n\n    if (props.fit) {\n      removeResizeListener(table.vnode.el, resizeListener);\n    } else {\n      off(window, \"resize\", doLayout);\n    }\n  };\n\n  const resizeListener = () => {\n    if (!table.$ready) return;\n    let shouldUpdateLayout = false;\n    const el = table.vnode.el;\n    const {\n      width: oldWidth,\n      height: oldHeight\n    } = resizeState.value;\n    const width = el.offsetWidth;\n\n    if (oldWidth !== width) {\n      shouldUpdateLayout = true;\n    }\n\n    const height2 = el.offsetHeight;\n\n    if ((props.height || shouldUpdateHeight.value) && oldHeight !== height2) {\n      shouldUpdateLayout = true;\n    }\n\n    if (shouldUpdateLayout) {\n      resizeState.value = {\n        width,\n        height: height2\n      };\n      doLayout();\n    }\n  };\n\n  const tableSize = useSize();\n  const bodyWidth = computed(() => {\n    const {\n      bodyWidth: bodyWidth_,\n      scrollY,\n      gutterWidth\n    } = layout;\n    return bodyWidth_.value ? `${bodyWidth_.value - (scrollY.value ? gutterWidth : 0)}px` : \"\";\n  });\n  const tableLayout = computed(() => {\n    if (props.maxHeight) return \"fixed\";\n    return props.tableLayout;\n  });\n\n  function calcMaxHeight(maxHeight, footerHeight, headerHeight) {\n    const parsedMaxHeight = parseHeight(maxHeight);\n    const tableHeaderHeight = props.showHeader ? headerHeight : 0;\n    if (parsedMaxHeight === null) return;\n\n    if (isString(parsedMaxHeight)) {\n      return `calc(${parsedMaxHeight} - ${footerHeight}px - ${tableHeaderHeight}px)`;\n    }\n\n    return parsedMaxHeight - footerHeight - tableHeaderHeight;\n  }\n\n  const height = computed(() => {\n    const headerHeight = layout.headerHeight.value || 0;\n    const bodyHeight2 = layout.bodyHeight.value;\n    const footerHeight = layout.footerHeight.value || 0;\n\n    if (props.height) {\n      return bodyHeight2 ? bodyHeight2 : void 0;\n    } else if (props.maxHeight) {\n      return calcMaxHeight(props.maxHeight, footerHeight, headerHeight);\n    }\n\n    return void 0;\n  });\n  const bodyHeight = computed(() => {\n    const headerHeight = layout.headerHeight.value || 0;\n    const bodyHeight2 = layout.bodyHeight.value;\n    const footerHeight = layout.footerHeight.value || 0;\n\n    if (props.height) {\n      return {\n        height: bodyHeight2 ? `${bodyHeight2}px` : \"\"\n      };\n    } else if (props.maxHeight) {\n      const maxHeight = calcMaxHeight(props.maxHeight, footerHeight, headerHeight);\n\n      if (maxHeight !== null) {\n        return {\n          \"max-height\": `${maxHeight}${isNumber(maxHeight) ? \"px\" : \"\"}`\n        };\n      }\n    }\n\n    return {};\n  });\n  const emptyBlockStyle = computed(() => {\n    if (props.data && props.data.length) return null;\n    let height2 = \"100%\";\n\n    if (layout.appendHeight.value) {\n      height2 = `calc(100% - ${layout.appendHeight.value}px)`;\n    }\n\n    return {\n      width: bodyWidth.value,\n      height: height2\n    };\n  });\n\n  const handleFixedMousewheel = (event, data) => {\n    const bodyWrapper = table.refs.bodyWrapper;\n\n    if (Math.abs(data.spinY) > 0) {\n      const currentScrollTop = bodyWrapper.scrollTop;\n\n      if (data.pixelY < 0 && currentScrollTop !== 0) {\n        event.preventDefault();\n      }\n\n      if (data.pixelY > 0 && bodyWrapper.scrollHeight - bodyWrapper.clientHeight > currentScrollTop) {\n        event.preventDefault();\n      }\n\n      bodyWrapper.scrollTop += Math.ceil(data.pixelY / 5);\n    } else {\n      bodyWrapper.scrollLeft += Math.ceil(data.pixelX / 5);\n    }\n  };\n\n  const fixedHeight = computed(() => {\n    if (props.maxHeight) {\n      if (props.showSummary) {\n        return {\n          bottom: 0\n        };\n      }\n\n      return {\n        bottom: layout.scrollX.value && props.data.length ? `${layout.gutterWidth}px` : \"\"\n      };\n    } else {\n      if (props.showSummary) {\n        return {\n          height: layout.tableHeight.value ? `${layout.tableHeight.value}px` : \"\"\n        };\n      }\n\n      return {\n        height: layout.viewportHeight.value ? `${layout.viewportHeight.value}px` : \"\"\n      };\n    }\n  });\n  const fixedBodyHeight = computed(() => {\n    if (props.height) {\n      return {\n        height: layout.fixedBodyHeight.value ? `${layout.fixedBodyHeight.value}px` : \"\"\n      };\n    } else if (props.maxHeight) {\n      let maxHeight = parseHeight(props.maxHeight);\n\n      if (typeof maxHeight === \"number\") {\n        maxHeight = layout.scrollX.value ? maxHeight - layout.gutterWidth : maxHeight;\n\n        if (props.showHeader) {\n          maxHeight -= layout.headerHeight.value;\n        }\n\n        maxHeight -= layout.footerHeight.value;\n        return {\n          \"max-height\": `${maxHeight}px`\n        };\n      }\n    }\n\n    return {};\n  });\n  return {\n    isHidden,\n    renderExpanded,\n    setDragVisible,\n    isGroup,\n    handleMouseLeave,\n    handleHeaderFooterMousewheel,\n    tableSize,\n    bodyHeight,\n    height,\n    emptyBlockStyle,\n    handleFixedMousewheel,\n    fixedHeight,\n    fixedBodyHeight,\n    resizeProxyVisible,\n    bodyWidth,\n    resizeState,\n    doLayout,\n    tableBodyStyles,\n    tableLayout,\n    scrollbarViewStyle\n  };\n}\n\nexport { useStyle as default };","map":null,"metadata":{},"sourceType":"module"}