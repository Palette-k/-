{"ast":null,"code":"import { defineComponent, ref, computed, inject, toRef, watch, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, renderSlot, Fragment, renderList, toDisplayString, createCommentVNode, createVNode, withCtx } from 'vue';\nimport dayjs from 'dayjs';\nimport { ElIcon } from '../../../icon/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport { DArrowLeft, DArrowRight } from '@element-plus/icons-vue';\nimport MonthTable from './basic-month-table.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\n\nconst _sfc_main = defineComponent({\n  components: {\n    MonthTable,\n    ElIcon,\n    DArrowLeft,\n    DArrowRight\n  },\n  props: {\n    unlinkPanels: Boolean,\n    parsedValue: {\n      type: Array\n    }\n  },\n  emits: [\"pick\", \"set-picker-option\"],\n\n  setup(props, ctx) {\n    const {\n      t,\n      lang\n    } = useLocale();\n    const leftDate = ref(dayjs().locale(lang.value));\n    const rightDate = ref(dayjs().locale(lang.value).add(1, \"year\"));\n    const hasShortcuts = computed(() => !!shortcuts.length);\n\n    const handleShortcutClick = shortcut => {\n      const shortcutValues = typeof shortcut.value === \"function\" ? shortcut.value() : shortcut.value;\n\n      if (shortcutValues) {\n        ctx.emit(\"pick\", [dayjs(shortcutValues[0]).locale(lang.value), dayjs(shortcutValues[1]).locale(lang.value)]);\n        return;\n      }\n\n      if (shortcut.onClick) {\n        shortcut.onClick(ctx);\n      }\n    };\n\n    const leftPrevYear = () => {\n      leftDate.value = leftDate.value.subtract(1, \"year\");\n\n      if (!props.unlinkPanels) {\n        rightDate.value = rightDate.value.subtract(1, \"year\");\n      }\n    };\n\n    const rightNextYear = () => {\n      if (!props.unlinkPanels) {\n        leftDate.value = leftDate.value.add(1, \"year\");\n      }\n\n      rightDate.value = rightDate.value.add(1, \"year\");\n    };\n\n    const leftNextYear = () => {\n      leftDate.value = leftDate.value.add(1, \"year\");\n    };\n\n    const rightPrevYear = () => {\n      rightDate.value = rightDate.value.subtract(1, \"year\");\n    };\n\n    const leftLabel = computed(() => {\n      return `${leftDate.value.year()} ${t(\"el.datepicker.year\")}`;\n    });\n    const rightLabel = computed(() => {\n      return `${rightDate.value.year()} ${t(\"el.datepicker.year\")}`;\n    });\n    const leftYear = computed(() => {\n      return leftDate.value.year();\n    });\n    const rightYear = computed(() => {\n      return rightDate.value.year() === leftDate.value.year() ? leftDate.value.year() + 1 : rightDate.value.year();\n    });\n    const enableYearArrow = computed(() => {\n      return props.unlinkPanels && rightYear.value > leftYear.value + 1;\n    });\n    const minDate = ref(null);\n    const maxDate = ref(null);\n    const rangeState = ref({\n      endDate: null,\n      selecting: false\n    });\n\n    const handleChangeRange = val => {\n      rangeState.value = val;\n    };\n\n    const handleRangePick = (val, close = true) => {\n      const minDate_ = val.minDate;\n      const maxDate_ = val.maxDate;\n\n      if (maxDate.value === maxDate_ && minDate.value === minDate_) {\n        return;\n      }\n\n      maxDate.value = maxDate_;\n      minDate.value = minDate_;\n      if (!close) return;\n      handleConfirm();\n    };\n\n    const isValidValue = value => {\n      return Array.isArray(value) && value && value[0] && value[1] && value[0].valueOf() <= value[1].valueOf();\n    };\n\n    const handleConfirm = (visible = false) => {\n      if (isValidValue([minDate.value, maxDate.value])) {\n        ctx.emit(\"pick\", [minDate.value, maxDate.value], visible);\n      }\n    };\n\n    const onSelect = selecting => {\n      rangeState.value.selecting = selecting;\n\n      if (!selecting) {\n        rangeState.value.endDate = null;\n      }\n    };\n\n    const formatToString = value => {\n      return value.map(_ => _.format(format));\n    };\n\n    const getDefaultValue = () => {\n      let start;\n\n      if (Array.isArray(defaultValue.value)) {\n        const left = dayjs(defaultValue.value[0]);\n        let right = dayjs(defaultValue.value[1]);\n\n        if (!props.unlinkPanels) {\n          right = left.add(1, \"year\");\n        }\n\n        return [left, right];\n      } else if (defaultValue.value) {\n        start = dayjs(defaultValue.value);\n      } else {\n        start = dayjs();\n      }\n\n      start = start.locale(lang.value);\n      return [start, start.add(1, \"year\")];\n    };\n\n    ctx.emit(\"set-picker-option\", [\"formatToString\", formatToString]);\n    const pickerBase = inject(\"EP_PICKER_BASE\");\n    const {\n      shortcuts,\n      disabledDate,\n      format\n    } = pickerBase.props;\n    const defaultValue = toRef(pickerBase.props, \"defaultValue\");\n    watch(() => defaultValue.value, val => {\n      if (val) {\n        const defaultArr = getDefaultValue();\n        leftDate.value = defaultArr[0];\n        rightDate.value = defaultArr[1];\n      }\n    }, {\n      immediate: true\n    });\n    watch(() => props.parsedValue, newVal => {\n      if (newVal && newVal.length === 2) {\n        minDate.value = newVal[0];\n        maxDate.value = newVal[1];\n        leftDate.value = minDate.value;\n\n        if (props.unlinkPanels && maxDate.value) {\n          const minDateYear = minDate.value.year();\n          const maxDateYear = maxDate.value.year();\n          rightDate.value = minDateYear === maxDateYear ? maxDate.value.add(1, \"year\") : maxDate.value;\n        } else {\n          rightDate.value = leftDate.value.add(1, \"year\");\n        }\n      } else {\n        const defaultArr = getDefaultValue();\n        minDate.value = null;\n        maxDate.value = null;\n        leftDate.value = defaultArr[0];\n        rightDate.value = defaultArr[1];\n      }\n    }, {\n      immediate: true\n    });\n    return {\n      shortcuts,\n      disabledDate,\n      onSelect,\n      handleRangePick,\n      rangeState,\n      handleChangeRange,\n      minDate,\n      maxDate,\n      enableYearArrow,\n      leftLabel,\n      rightLabel,\n      leftNextYear,\n      leftPrevYear,\n      rightNextYear,\n      rightPrevYear,\n      t,\n      leftDate,\n      rightDate,\n      hasShortcuts,\n      handleShortcutClick\n    };\n  }\n\n});\n\nconst _hoisted_1 = {\n  class: \"el-picker-panel__body-wrapper\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"el-picker-panel__sidebar\"\n};\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  class: \"el-picker-panel__body\"\n};\nconst _hoisted_5 = {\n  class: \"el-picker-panel__content el-date-range-picker__content is-left\"\n};\nconst _hoisted_6 = {\n  class: \"el-date-range-picker__header\"\n};\nconst _hoisted_7 = [\"disabled\"];\nconst _hoisted_8 = {\n  class: \"el-picker-panel__content el-date-range-picker__content is-right\"\n};\nconst _hoisted_9 = {\n  class: \"el-date-range-picker__header\"\n};\nconst _hoisted_10 = [\"disabled\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_d_arrow_left = resolveComponent(\"d-arrow-left\");\n\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_d_arrow_right = resolveComponent(\"d-arrow-right\");\n\n  const _component_month_table = resolveComponent(\"month-table\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([\"el-picker-panel el-date-range-picker\", [{\n      \"has-sidebar\": _ctx.$slots.sidebar || _ctx.hasShortcuts\n    }]])\n  }, [createElementVNode(\"div\", _hoisted_1, [renderSlot(_ctx.$slots, \"sidebar\", {\n    class: \"el-picker-panel__sidebar\"\n  }), _ctx.hasShortcuts ? (openBlock(), createElementBlock(\"div\", _hoisted_2, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.shortcuts, (shortcut, key) => {\n    return openBlock(), createElementBlock(\"button\", {\n      key,\n      type: \"button\",\n      class: \"el-picker-panel__shortcut\",\n      onClick: $event => _ctx.handleShortcutClick(shortcut)\n    }, toDisplayString(shortcut.text), 9, _hoisted_3);\n  }), 128))])) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", _hoisted_4, [createElementVNode(\"div\", _hoisted_5, [createElementVNode(\"div\", _hoisted_6, [createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"el-picker-panel__icon-btn d-arrow-left\",\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.leftPrevYear && _ctx.leftPrevYear(...args))\n  }, [createVNode(_component_el_icon, null, {\n    default: withCtx(() => [createVNode(_component_d_arrow_left)]),\n    _: 1\n  })]), _ctx.unlinkPanels ? (openBlock(), createElementBlock(\"button\", {\n    key: 0,\n    type: \"button\",\n    disabled: !_ctx.enableYearArrow,\n    class: normalizeClass([{\n      \"is-disabled\": !_ctx.enableYearArrow\n    }, \"el-picker-panel__icon-btn d-arrow-right\"]),\n    onClick: _cache[1] || (_cache[1] = (...args) => _ctx.leftNextYear && _ctx.leftNextYear(...args))\n  }, [createVNode(_component_el_icon, null, {\n    default: withCtx(() => [createVNode(_component_d_arrow_right)]),\n    _: 1\n  })], 10, _hoisted_7)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", null, toDisplayString(_ctx.leftLabel), 1)]), createVNode(_component_month_table, {\n    \"selection-mode\": \"range\",\n    date: _ctx.leftDate,\n    \"min-date\": _ctx.minDate,\n    \"max-date\": _ctx.maxDate,\n    \"range-state\": _ctx.rangeState,\n    \"disabled-date\": _ctx.disabledDate,\n    onChangerange: _ctx.handleChangeRange,\n    onPick: _ctx.handleRangePick,\n    onSelect: _ctx.onSelect\n  }, null, 8, [\"date\", \"min-date\", \"max-date\", \"range-state\", \"disabled-date\", \"onChangerange\", \"onPick\", \"onSelect\"])]), createElementVNode(\"div\", _hoisted_8, [createElementVNode(\"div\", _hoisted_9, [_ctx.unlinkPanels ? (openBlock(), createElementBlock(\"button\", {\n    key: 0,\n    type: \"button\",\n    disabled: !_ctx.enableYearArrow,\n    class: normalizeClass([{\n      \"is-disabled\": !_ctx.enableYearArrow\n    }, \"el-picker-panel__icon-btn d-arrow-left\"]),\n    onClick: _cache[2] || (_cache[2] = (...args) => _ctx.rightPrevYear && _ctx.rightPrevYear(...args))\n  }, [createVNode(_component_el_icon, null, {\n    default: withCtx(() => [createVNode(_component_d_arrow_left)]),\n    _: 1\n  })], 10, _hoisted_10)) : createCommentVNode(\"v-if\", true), createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"el-picker-panel__icon-btn d-arrow-right\",\n    onClick: _cache[3] || (_cache[3] = (...args) => _ctx.rightNextYear && _ctx.rightNextYear(...args))\n  }, [createVNode(_component_el_icon, null, {\n    default: withCtx(() => [createVNode(_component_d_arrow_right)]),\n    _: 1\n  })]), createElementVNode(\"div\", null, toDisplayString(_ctx.rightLabel), 1)]), createVNode(_component_month_table, {\n    \"selection-mode\": \"range\",\n    date: _ctx.rightDate,\n    \"min-date\": _ctx.minDate,\n    \"max-date\": _ctx.maxDate,\n    \"range-state\": _ctx.rangeState,\n    \"disabled-date\": _ctx.disabledDate,\n    onChangerange: _ctx.handleChangeRange,\n    onPick: _ctx.handleRangePick,\n    onSelect: _ctx.onSelect\n  }, null, 8, [\"date\", \"min-date\", \"max-date\", \"range-state\", \"disabled-date\", \"onChangerange\", \"onPick\", \"onSelect\"])])])])], 2);\n}\n\nvar MonthRangePickPanel = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { MonthRangePickPanel as default };","map":null,"metadata":{},"sourceType":"module"}