{"ast":null,"code":"import { isVNode, createVNode, render } from 'vue';\nimport { isClient, isNumber } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { messageConfig } from '../../config-provider/src/config-provider.mjs';\nimport MessageConstructor from './message2.mjs';\nimport { messageTypes } from './message.mjs';\nimport { isObject, isString } from '@vue/shared';\nimport { useZIndex } from '../../../hooks/use-z-index/index.mjs';\nimport { isElement } from '../../../utils/types.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nconst instances = [];\nlet seed = 1;\n\nconst message = function (options = {}, context) {\n  if (!isClient) return {\n    close: () => void 0\n  };\n\n  if (isNumber(messageConfig.max) && instances.length >= messageConfig.max) {\n    return {\n      close: () => void 0\n    };\n  }\n\n  if (!isVNode(options) && isObject(options) && options.grouping && !isVNode(options.message) && instances.length) {\n    const tempVm = instances.find(item => {\n      var _a, _b, _c;\n\n      return `${(_b = (_a = item.vm.props) == null ? void 0 : _a.message) != null ? _b : \"\"}` === `${(_c = options.message) != null ? _c : \"\"}`;\n    });\n\n    if (tempVm) {\n      tempVm.vm.component.props.repeatNum += 1;\n      tempVm.vm.component.props.type = options == null ? void 0 : options.type;\n      return {\n        close: () => vm.component.proxy.visible = false\n      };\n    }\n  }\n\n  if (isString(options) || isVNode(options)) {\n    options = {\n      message: options\n    };\n  }\n\n  let verticalOffset = options.offset || 20;\n  instances.forEach(({\n    vm: vm2\n  }) => {\n    var _a;\n\n    verticalOffset += (((_a = vm2.el) == null ? void 0 : _a.offsetHeight) || 0) + 16;\n  });\n  verticalOffset += 16;\n  const {\n    nextZIndex\n  } = useZIndex();\n  const id = `message_${seed++}`;\n  const userOnClose = options.onClose;\n  const props = {\n    zIndex: nextZIndex(),\n    offset: verticalOffset,\n    ...options,\n    id,\n    onClose: () => {\n      close(id, userOnClose);\n    }\n  };\n  let appendTo = document.body;\n\n  if (isElement(options.appendTo)) {\n    appendTo = options.appendTo;\n  } else if (isString(options.appendTo)) {\n    appendTo = document.querySelector(options.appendTo);\n  }\n\n  if (!isElement(appendTo)) {\n    debugWarn(\"ElMessage\", \"the appendTo option is not an HTMLElement. Falling back to document.body.\");\n    appendTo = document.body;\n  }\n\n  const container = document.createElement(\"div\");\n  container.className = `container_${id}`;\n  const messageContent = props.message;\n  const vm = createVNode(MessageConstructor, props, isVNode(messageContent) ? {\n    default: () => messageContent\n  } : null);\n  vm.appContext = context || message._context;\n\n  vm.props.onDestroy = () => {\n    render(null, container);\n  };\n\n  render(vm, container);\n  instances.push({\n    vm\n  });\n  appendTo.appendChild(container.firstElementChild);\n  return {\n    close: () => vm.component.proxy.visible = false\n  };\n};\n\nmessageTypes.forEach(type => {\n  message[type] = (options = {}, appContext) => {\n    if (isString(options) || isVNode(options)) {\n      options = {\n        message: options\n      };\n    }\n\n    return message({ ...options,\n      type\n    }, appContext);\n  };\n});\n\nfunction close(id, userOnClose) {\n  const idx = instances.findIndex(({\n    vm: vm2\n  }) => id === vm2.component.props.id);\n  if (idx === -1) return;\n  const {\n    vm\n  } = instances[idx];\n  if (!vm) return;\n  userOnClose == null ? void 0 : userOnClose(vm);\n  const removedHeight = vm.el.offsetHeight;\n  instances.splice(idx, 1);\n  const len = instances.length;\n  if (len < 1) return;\n\n  for (let i = idx; i < len; i++) {\n    const pos = parseInt(instances[i].vm.el.style[\"top\"], 10) - removedHeight - 16;\n    instances[i].vm.component.props.offset = pos;\n  }\n}\n\nfunction closeAll() {\n  var _a;\n\n  for (let i = instances.length - 1; i >= 0; i--) {\n    const instance = instances[i].vm.component;\n    (_a = instance == null ? void 0 : instance.proxy) == null ? void 0 : _a.close();\n  }\n}\n\nmessage.closeAll = closeAll;\nmessage._context = null;\nexport { close, closeAll, message as default };","map":null,"metadata":{},"sourceType":"module"}