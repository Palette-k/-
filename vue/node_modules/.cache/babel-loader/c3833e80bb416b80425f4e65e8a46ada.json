{"ast":null,"code":"import { isEqual } from 'lodash-unified';\nimport Node from './node.mjs';\n\nconst flatNodes = (nodes, leafOnly) => {\n  return nodes.reduce((res, node) => {\n    if (node.isLeaf) {\n      res.push(node);\n    } else {\n      !leafOnly && res.push(node);\n      res = res.concat(flatNodes(node.children, leafOnly));\n    }\n\n    return res;\n  }, []);\n};\n\nclass Store {\n  constructor(data, config) {\n    this.config = config;\n    const nodes = (data || []).map(nodeData => new Node(nodeData, this.config));\n    this.nodes = nodes;\n    this.allNodes = flatNodes(nodes, false);\n    this.leafNodes = flatNodes(nodes, true);\n  }\n\n  getNodes() {\n    return this.nodes;\n  }\n\n  getFlattedNodes(leafOnly) {\n    return leafOnly ? this.leafNodes : this.allNodes;\n  }\n\n  appendNode(nodeData, parentNode) {\n    const node = parentNode ? parentNode.appendChild(nodeData) : new Node(nodeData, this.config);\n    if (!parentNode) this.nodes.push(node);\n    this.allNodes.push(node);\n    node.isLeaf && this.leafNodes.push(node);\n  }\n\n  appendNodes(nodeDataList, parentNode) {\n    nodeDataList.forEach(nodeData => this.appendNode(nodeData, parentNode));\n  }\n\n  getNodeByValue(value, leafOnly = false) {\n    if (!value && value !== 0) return null;\n    const nodes = this.getFlattedNodes(leafOnly).filter(node => isEqual(node.value, value) || isEqual(node.pathValues, value));\n    return nodes[0] || null;\n  }\n\n  getSameNode(node) {\n    if (!node) return null;\n    const nodes = this.getFlattedNodes(false).filter(({\n      value,\n      level\n    }) => isEqual(node.value, value) && node.level === level);\n    return nodes[0] || null;\n  }\n\n}\n\nexport { Store as default };","map":null,"metadata":{},"sourceType":"module"}