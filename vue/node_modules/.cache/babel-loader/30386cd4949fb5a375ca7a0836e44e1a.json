{"ast":null,"code":"import { defineComponent, computed, ref, unref, toRef, provide, readonly, resolveComponent, openBlock, createBlock, withCtx, createVNode, renderSlot, createCommentVNode, createElementBlock, toDisplayString } from 'vue';\nimport { ElPopper } from '../../popper/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport ElTooltipContent from './content.mjs';\nimport ElTooltipTrigger from './trigger.mjs';\nimport { useTooltipContentProps, useTooltipTriggerProps, useTooltipProps } from './tooltip.mjs';\nimport { TOOLTIP_INJECTION_KEY } from './tokens.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { createModelToggleComposable } from '../../../hooks/use-model-toggle/index.mjs';\nimport ElPopperArrow from '../../popper/src/arrow.mjs';\nimport { usePopperArrowProps } from '../../popper/src/popper.mjs';\nimport { usePopperContainer } from '../../../hooks/use-popper-container/index.mjs';\nimport { isUndefined } from '../../../utils/types.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { isBoolean } from '@vueuse/core';\nimport { useId } from '../../../hooks/use-id/index.mjs';\nimport { useDelayedToggle } from '../../../hooks/use-delayed-toggle/index.mjs';\nconst {\n  useModelToggleProps,\n  useModelToggle,\n  useModelToggleEmits\n} = createModelToggleComposable(\"visible\");\n\nconst _sfc_main = defineComponent({\n  name: \"ElTooltip\",\n  components: {\n    ElPopper,\n    ElPopperArrow,\n    ElTooltipContent,\n    ElTooltipTrigger\n  },\n  props: { ...useModelToggleProps,\n    ...useTooltipContentProps,\n    ...useTooltipTriggerProps,\n    ...usePopperArrowProps,\n    ...useTooltipProps\n  },\n  emits: [...useModelToggleEmits, \"before-show\", \"before-hide\", \"show\", \"hide\"],\n\n  setup(props, {\n    emit\n  }) {\n    usePopperContainer();\n    const compatShowAfter = computed(() => {\n      if (!isUndefined(props.openDelay)) {\n        debugWarn(\"ElTooltip\", \"open-delay is about to be deprecated in the next major version, please use `show-after` instead\");\n      }\n\n      return props.openDelay || props.showAfter;\n    });\n    const compatShowArrow = computed(() => {\n      if (!isUndefined(props.visibleArrow)) {\n        debugWarn(\"ElTooltip\", \"`visible-arrow` is about to be deprecated in the next major version, please use `show-arrow` instead\");\n      }\n\n      return isBoolean(props.visibleArrow) ? props.visibleArrow : props.showArrow;\n    });\n    const id = useId();\n    const popperRef = ref(null);\n\n    const updatePopper = () => {\n      var _a;\n\n      const popperComponent = unref(popperRef);\n\n      if (popperComponent) {\n        (_a = popperComponent.popperInstanceRef) == null ? void 0 : _a.update();\n      }\n    };\n\n    const open = ref(false);\n    const {\n      show,\n      hide\n    } = useModelToggle({\n      indicator: open\n    });\n    const {\n      onOpen,\n      onClose\n    } = useDelayedToggle({\n      showAfter: compatShowAfter,\n      hideAfter: toRef(props, \"hideAfter\"),\n      open: show,\n      close: hide\n    });\n    const controlled = computed(() => isBoolean(props.visible));\n    provide(TOOLTIP_INJECTION_KEY, {\n      controlled,\n      id,\n      open: readonly(open),\n      trigger: toRef(props, \"trigger\"),\n      onOpen,\n      onClose,\n      onToggle: () => {\n        if (unref(open)) {\n          onClose();\n        } else {\n          onOpen();\n        }\n      },\n      onShow: () => {\n        emit(\"show\");\n      },\n      onHide: () => {\n        emit(\"hide\");\n      },\n      onBeforeShow: () => {\n        emit(\"before-show\");\n      },\n      onBeforeHide: () => {\n        emit(\"before-hide\");\n      },\n      updatePopper\n    });\n    return {\n      compatShowAfter,\n      compatShowArrow,\n      popperRef,\n      open,\n      hide,\n      updatePopper,\n      onOpen,\n      onClose\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"innerHTML\"];\nconst _hoisted_2 = {\n  key: 1\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tooltip_trigger = resolveComponent(\"el-tooltip-trigger\");\n\n  const _component_el_popper_arrow = resolveComponent(\"el-popper-arrow\");\n\n  const _component_el_tooltip_content = resolveComponent(\"el-tooltip-content\");\n\n  const _component_el_popper = resolveComponent(\"el-popper\");\n\n  return openBlock(), createBlock(_component_el_popper, {\n    ref: \"popperRef\"\n  }, {\n    default: withCtx(() => [createVNode(_component_el_tooltip_trigger, {\n      disabled: _ctx.disabled,\n      trigger: _ctx.trigger,\n      \"virtual-ref\": _ctx.virtualRef,\n      \"virtual-triggering\": _ctx.virtualTriggering\n    }, {\n      default: withCtx(() => [_ctx.$slots.default ? renderSlot(_ctx.$slots, \"default\", {\n        key: 0\n      }) : createCommentVNode(\"v-if\", true)]),\n      _: 3\n    }, 8, [\"disabled\", \"trigger\", \"virtual-ref\", \"virtual-triggering\"]), createVNode(_component_el_tooltip_content, {\n      \"aria-label\": _ctx.ariaLabel,\n      \"boundaries-padding\": _ctx.boundariesPadding,\n      content: _ctx.content,\n      disabled: _ctx.disabled,\n      effect: _ctx.effect,\n      enterable: _ctx.enterable,\n      \"fallback-placements\": _ctx.fallbackPlacements,\n      \"hide-after\": _ctx.hideAfter,\n      \"gpu-acceleration\": _ctx.gpuAcceleration,\n      offset: _ctx.offset,\n      persistent: _ctx.persistent,\n      \"popper-class\": _ctx.popperClass,\n      \"popper-style\": _ctx.popperStyle,\n      placement: _ctx.placement,\n      \"popper-options\": _ctx.popperOptions,\n      pure: _ctx.pure,\n      \"raw-content\": _ctx.rawContent,\n      \"reference-el\": _ctx.referenceEl,\n      \"show-after\": _ctx.compatShowAfter,\n      strategy: _ctx.strategy,\n      teleported: _ctx.teleported,\n      transition: _ctx.transition,\n      \"z-index\": _ctx.zIndex,\n      \"append-to\": _ctx.appendTo\n    }, {\n      default: withCtx(() => [renderSlot(_ctx.$slots, \"content\", {}, () => [_ctx.rawContent ? (openBlock(), createElementBlock(\"span\", {\n        key: 0,\n        innerHTML: _ctx.content\n      }, null, 8, _hoisted_1)) : (openBlock(), createElementBlock(\"span\", _hoisted_2, toDisplayString(_ctx.content), 1))]), _ctx.compatShowArrow ? (openBlock(), createBlock(_component_el_popper_arrow, {\n        key: 0,\n        \"arrow-offset\": _ctx.arrowOffset\n      }, null, 8, [\"arrow-offset\"])) : createCommentVNode(\"v-if\", true)]),\n      _: 3\n    }, 8, [\"aria-label\", \"boundaries-padding\", \"content\", \"disabled\", \"effect\", \"enterable\", \"fallback-placements\", \"hide-after\", \"gpu-acceleration\", \"offset\", \"persistent\", \"popper-class\", \"popper-style\", \"placement\", \"popper-options\", \"pure\", \"raw-content\", \"reference-el\", \"show-after\", \"strategy\", \"teleported\", \"transition\", \"z-index\", \"append-to\"])]),\n    _: 3\n  }, 512);\n}\n\nvar Tooltip = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { Tooltip as default };","map":null,"metadata":{},"sourceType":"module"}