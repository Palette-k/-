{"ast":null,"code":"import { inject, computed } from 'vue';\nimport '../../../utils/index.mjs';\nimport { throwError } from '../../../utils/error.mjs';\n\nfunction useMenu(instance, currentIndex) {\n  const rootMenu = inject(\"rootMenu\");\n  if (!rootMenu) throwError(\"useMenu\", \"can not inject root menu\");\n  const indexPath = computed(() => {\n    let parent = instance.parent;\n    const path = [currentIndex.value];\n\n    while (parent.type.name !== \"ElMenu\") {\n      if (parent.props.index) {\n        path.unshift(parent.props.index);\n      }\n\n      parent = parent.parent;\n    }\n\n    return path;\n  });\n  const parentMenu = computed(() => {\n    let parent = instance.parent;\n\n    while (parent && ![\"ElMenu\", \"ElSubMenu\"].includes(parent.type.name)) {\n      parent = parent.parent;\n    }\n\n    return parent;\n  });\n  const paddingStyle = computed(() => {\n    let parent = instance.parent;\n    if (rootMenu.props.mode !== \"vertical\") return {};\n    let padding = 20;\n\n    if (rootMenu.props.collapse) {\n      padding = 20;\n    } else {\n      while (parent && parent.type.name !== \"ElMenu\") {\n        if (parent.type.name === \"ElSubMenu\") {\n          padding += 20;\n        }\n\n        parent = parent.parent;\n      }\n    }\n\n    return {\n      paddingLeft: `${padding}px`\n    };\n  });\n  return {\n    parentMenu,\n    paddingStyle,\n    indexPath\n  };\n}\n\nexport { useMenu as default };","map":null,"metadata":{},"sourceType":"module"}